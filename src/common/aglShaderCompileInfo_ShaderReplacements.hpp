#pragma once

#include <string>

namespace {

#if RIO_IS_WIN
#define STRING_REPLACEMENT_COUNT 2
#else
#define STRING_REPLACEMENT_COUNT 0
#endif // RIO_IS_WIN

static const std::string cStringReplacement_From[STRING_REPLACEMENT_COUNT] = {
#if RIO_IS_WIN
    // (NSMBU) wii_pipeline_fs.sh (new)
    "//------------------------------------------------------------------------------\n"
    "/** @file   wii_pipleline_fs.sh\n"
    " *  @brief  wiiのパイプラインエミュレータ（フラグメント）\n"
    " *  @author Takuhiro Dohta\n"
    " */\n"
    "//------------------------------------------------------------------------------\n"
    "//------------------------------------------------------------------------------\n"
    "// ハード仕様\n"
    "//------------------------------------------------------------------------------\n"
    "#define TEV_STAGE_MAX   \t( 8 )\n"
    "#define IND_STAGE_MAX   \t( 4 )\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// マクロ定義\n"
    "//------------------------------------------------------------------------------\n"
    "#define konst_color8( x )\t\tvec4( x / 8.0 )\n"
    "#define expand_swap_table( n )\tswap_table##n\n"
    "#define swap_table( c, n )\t\tc.expand_swap_table( n )\n"
    "#define tev_tex_coord( n )\t\tstage_ind##n##_offset( stage##n##_tex_coord_order, textureSize( stage##n##_tex_map_order, 0 ) )\n"
    "#define tev_tex_fetch( n )      texture( stage##n##_tex_map_order, tev_tex_coord( n ) )\n"
    "#define ind_tex_fetch( n )\t\ttexture( ind_stage##n##_tex_map_order, ind_stage##n##_tex_coord_order )\n"
    "\n"
    "#define ind_offset0( tex_coord, tex_size )       ( ( tex_coord ) + ( ind_offset0_ ) / ( tex_size ) )\n"
    "#define ind_offset1( tex_coord, tex_size )       ( ( tex_coord ) + ( ind_offset1_ ) / ( tex_size ) )\n"
    "#define ind_offset2( tex_coord, tex_size )       ( ( tex_coord ) + ( ind_offset2_ ) / ( tex_size ) )\n"
    "#define ind_offset3( tex_coord, tex_size )       ( ( tex_coord ) + ( ind_offset3_ ) / ( tex_size ) )\n"
    "#define ind_offset_null( tex_coord, tex_size )   ( ( tex_coord ) )\n"
    "#define divide_2( stage )                        ( ( stage ) * 0.5 )\n"
    "#define scale_1( stage )                         ( ( stage ) )\n"
    "#define scale_2( stage )                         ( ( stage ) * 2.0 )\n"
    "#define scale_4( stage )                         ( ( stage ) * 4.0 )\n"
    "#define op_add( a, b )                           ( ( a ) + ( b ) )\n"
    "#define op_sub( a, b )                           ( ( a ) - ( b ) )\n"
    "#define bias_zero_rgb( stage )                   ( ( stage ) )\n"
    "#define bias_add_half_rgb( stage )               ( ( stage ) + vec3( 0.5 ) )\n"
    "#define bias_sub_half_rgb( stage )               ( ( stage ) - vec3( 0.5 ) )\n"
    "#define bias_zero_a( stage )                     ( ( stage ) )\n"
    "#define bias_add_half_a( stage )                 ( ( stage ) + 0.5 )\n"
    "#define bias_sub_half_a( stage )                 ( ( stage ) - 0.5 )\n"
    "\n"
    "#define calc_tev_rgb( ca, cb, cc, cd, op, bias, scale ) \\\n"
    "  clamp( scale( bias( op( ( cd ), ( ( one.rgb - ( cc ) ) * ( ca ) + ( cc ) * ( cb ) ) ) ) ), 0.0, 1.0 )\n"
    "\n"
    "#define calc_tev_alpha( aa, ab, ac, ad, op, bias, scale ) \\\n"
    "  clamp( scale( bias( op( ( ad ), ( ( one.a   - ( ac ) ) * ( aa ) + ( ac ) * ( ab ) ) ) ) ), 0.0, 1.0 )\n"
    "\n"
    "#define calc_tev_stage( n )                                              \\\n"
    "{                                                                        \\\n"
    "    vec4 ras = swap_table( stage##n##_ras_order, stage##n##_ras_swap );  \\\n"
    "    vec4 tex = tev_tex_fetch( n );                                       \\\n"
    "    tex = swap_table( tex, stage##n##_tex_map_swap );                    \\\n"
    "                                                                         \\\n"
    "    vec3 konst_color  = stage_color##n##_konst;                          \\\n"
    "    float konst_alpha = stage_alpha##n##_konst;                          \\\n"
    "                                                                         \\\n"
    "    stage_color##n##_out_reg.rgb = calc_tev_rgb( stage_color##n##_a,     \\\n"
    "                                                 stage_color##n##_b,     \\\n"
    "                                                 stage_color##n##_c,     \\\n"
    "                                                 stage_color##n##_d,     \\\n"
    "                                                 stage_color##n##_op,    \\\n"
    "                                                 stage_color##n##_bias,  \\\n"
    "                                                 stage_color##n##_scale  \\\n"
    "                                                 );                      \\\n"
    "                                                                         \\\n"
    "    stage_alpha##n##_out_reg.a = calc_tev_alpha( stage_alpha##n##_a,     \\\n"
    "                                                 stage_alpha##n##_b,     \\\n"
    "                                                 stage_alpha##n##_c,     \\\n"
    "                                                 stage_alpha##n##_d,     \\\n"
    "                                                 stage_alpha##n##_op,    \\\n"
    "                                                 stage_alpha##n##_bias,  \\\n"
    "                                                 stage_alpha##n##_scale  \\\n"
    "                                                 );                      \\\n"
    "}\n"
    "\n"
    "#define calc_ind_stage( n )                                                                                           \\\n"
    "{                                                                                                                     \\\n"
    "    vec4 tex = ind_tex_fetch( n ) - vec4( 0.5 );                                                                      \\\n"
    "    ind_offset##n##_ = ind_texmtx##n[ 0 ].xy * tex.a + ind_texmtx##n[ 0 ].zw * tex.r + ind_texmtx##n[ 1 ].xy * tex.r; \\\n"
    "    ind_offset##n##_ = ( ind_offset##n##_ ) * 255.0;                                                                  \\\n"
    "}                                                                                                    \n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"indirect_stage_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define ind_stage_num\t\t\t   0\n"
    "\n"
    "// attr : \"tex_map_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"ind_tex_map0\", \"ind_tex_map0\" - \"ind_tex_map7\" \n"
    "#define ind_stage0_tex_map_order   tex_map0\n"
    "\n"
    "// attr : \"tex_coord_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"ind_tex_coord0\", \"ind_tex_coord0\" - \"ind_tex_coord7\"\n"
    "#define ind_stage0_tex_coord_order tex_coord0\n"
    "\n"
    "#define ind_stage1_tex_map_order   tex_map1\n"
    "#define ind_stage1_tex_coord_order tex_coord1\n"
    "#define ind_stage2_tex_map_order   tex_map2\n"
    "#define ind_stage2_tex_coord_order tex_coord2\n"
    "#define ind_stage3_tex_map_order   tex_map3\n"
    "#define ind_stage3_tex_coord_order tex_coord3\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"add_indirect_combination_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define ind_combination_num     0\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define tev_stage_num\t\t\t8\n"
    "\n"
    "// attr : \"swap_table0\" - \"swap_table3\"\n"
    "\n"
    "// ex.\"r g b a\" : \"rgba\"\n"
    "// ex.\"r r r b\" : \"rrrb\"\n"
    "#define swap_table0\t\t\t\trgba\n"
    "#define swap_table1\t\t\t\trgba\n"
    "#define swap_table2\t\t\t\trgba\n"
    "#define swap_table3\t\t\t\trgba\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage\"\n"
    "\n"
    "// attr : \"ras_order\"\n"
    "\n"
    "// \"color0a0\"   : \"color0a0\"\n"
    "// \"color1a1\"   : \"color1a1\"\n"
    "// \"color_null\" : \"color_null\"\n"
    "#define stage0_ras_order\t\tcolor0a0\n"
    "\n"
    "// attr : \"tex_map_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"tex_map0\", \"tex_map0\" - \"tex_map7\"\n"
    "#define stage0_tex_map_order\ttex_map0\n"
    "\n"
    "// attr : \"tex_coord_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"tex_coord0\", \"tex_coord0\" - \"tex_coord7\"\n"
    "#define stage0_tex_coord_order\ttex_coord0\n"
    "\n"
    "// attr : \"ras_swap\"\n"
    "\n"
    "// \"0\" - \"3\" : \"0\" - \"3\"\n"
    "#define stage0_ras_swap\t\t\t0\n"
    "\n"
    "// attr : \"tex_map_swap\"\n"
    "\n"
    "// \"0\" - \"3\" : \"0\"-\"3\"\n"
    "#define stage0_tex_map_swap\t\t0\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_color\"\n"
    "\n"
    "// attr : \"a\", \"b\", \"c\", \"d\"\n"
    "\n"
    "// \"rasc\"   : \"ras.rgb\"\n"
    "// \"rasa\"   : \"ras.a\"\n"
    "// \"texc\"   : \"tex.rgb\"\n"
    "// \"texa\"   : \"tex.a\"\n"
    "// \"c0\"     : \"reg0.rgb\"\n"
    "// \"a0\"     : \"reg0.aaa\"\n"
    "// \"c1\"     : \"reg1.rgb\"\n"
    "// \"a1\"     : \"reg1.aaa\"\n"
    "// \"c2\"     : \"reg2.rgb\"\n"
    "// \"a2\"     : \"reg2.aaa\"\n"
    "// \"cprev\"  : \"prev.rgb\"\n"
    "// \"aprev\"  : \"prev.aaa\"\n"
    "// \"konst\"  : \"konst_color.rgb\"\n"
    "// \"zero\"   : \"zero.rgb\"\n"
    "// \"half\"   : \"half_rgb\"\n"
    "// \"one\"    : \"one.rgb\"\n"
    "#define stage_color0_a          zero.rgb\n"
    "#define stage_color0_b          tex.rgb\n"
    "#define stage_color0_c          ras.rgb\n"
    "#define stage_color0_d          zero.rgb\n"
    "\n"
    "// attr   : \"constant\"\n"
    "\n"
    "// \"k0\"   : \"konst0.rgb\"\n"
    "// \"k0_r\" : \"konst0.rrr\"\n"
    "// \"k0_g\" : \"konst0.ggg\"\n"
    "// \"k0_b\" : \"konst0.bbb\"\n"
    "// \"k0_a\" : \"konst0.aaa\"\n"
    "// \"k1\"   : \"konst1.rgb\"\n"
    "// \"k1_r\" : \"konst1.rrr\"\n"
    "// \"k1_g\" : \"konst1.ggg\"\n"
    "// \"k1_b\" : \"konst1.bbb\"\n"
    "// \"k1_a\" : \"konst1.aaa\"\n"
    "// \"k2\"   : \"konst2.rgb\"\n"
    "// \"k2_r\" : \"konst2.rrr\"\n"
    "// \"k2_g\" : \"konst2.ggg\"\n"
    "// \"k2_b\" : \"konst2.bbb\"\n"
    "// \"k2_a\" : \"konst2.aaa\"\n"
    "// \"k3\"   : \"konst3.rgb\"\n"
    "// \"k3_r\" : \"konst3.rrr\"\n"
    "// \"k3_g\" : \"konst3.ggg\"\n"
    "// \"k3_b\" : \"konst3.bbb\"\n"
    "// \"k3_a\" : \"konst3.aaa\"\n"
    "// \"8_8\"  : \"konst_8_8.rgb\"\n"
    "// \"7_8\"  : \"konst_7_8.rgb\"\n"
    "// \"6_8\"  : \"konst_6_8.rgb\"\n"
    "// \"5_8\"  : \"konst_5_8.rgb\"\n"
    "// \"4_8\"  : \"konst_4_8.rgb\"\n"
    "// \"3_8\"  : \"konst_3_8.rgb\"\n"
    "// \"2_8\"  : \"konst_2_8.rgb\"\n"
    "// \"1_8\"  : \"konst_1_8.rgb\"\n"
    "#define stage_color0_konst\t\tkonst_8_8.rgb\n"
    "\n"
    "// attr : \"op\"\n"
    "\n"
    "// \"add\" : \"op_add\"\n"
    "// \"sub\" : \"op_sub\"\n"
    "#define stage_color0_op         op_add\n"
    "\n"
    "// attr : \"bias\"\n"
    "\n"
    "// \"zero\"     : \"bias_zero_rgb\"\n"
    "// \"sub_half\" : \"bias_sub_half_rgb\"\n"
    "// \"add_half\" : \"bias_add_half_rgb\"\n"
    "#define stage_color0_bias       bias_zero_rgb\n"
    "\n"
    "// attr : \"scale\"\n"
    "\n"
    "// \"divide_2\" : \"divide_2\n"
    "// \"scale_1\"  : \"scale_1\n"
    "// \"scale_2\"  : \"scale_2\n"
    "// \"scale_4\"  : \"scale_4\n"
    "#define stage_color0_scale      scale_1\n"
    "\n"
    "// attr : \"out_reg\"\n"
    "\n"
    "// \"reg0\" : \"reg0\"\n"
    "// \"reg1\" : \"reg1\"\n"
    "// \"reg2\" : \"reg2\"\n"
    "// \"prev\" : \"prev\"\n"
    "#define stage_color0_out_reg    prev\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_alpha\"\n"
    "\n"
    "// attr : \"a\", \"b\", \"c\", \"d\"\n"
    "\n"
    "// \"rasa\"   : \"ras.a\"\n"
    "// \"texa\"   : \"tex.a\"\n"
    "// \"a0\"     : \"reg0.a\"\n"
    "// \"a1\"     : \"reg1.a\"\n"
    "// \"a2\"     : \"reg2.a\"\n"
    "// \"aprev\"  : \"prev.a\"\n"
    "// \"konst\"  : \"konst_alpha\"\n"
    "// \"zero\"   : \"zero.a\"\n"
    "#define stage_alpha0_a          zero.a\n"
    "#define stage_alpha0_b          tex.a\n"
    "#define stage_alpha0_c          ras.a\n"
    "#define stage_alpha0_d          zero.a\n"
    "#define stage_alpha0_op         op_add\n"
    "\n"
    "// attr   : \"constant\"\n"
    "\n"
    "// \"k0_r\" : \"konst0.r\"\n"
    "// \"k0_g\" : \"konst0.g\"\n"
    "// \"k0_b\" : \"konst0.b\"\n"
    "// \"k0_a\" : \"konst0.a\"\n"
    "// \"k1_r\" : \"konst1.r\"\n"
    "// \"k1_g\" : \"konst1.g\"\n"
    "// \"k1_b\" : \"konst1.b\"\n"
    "// \"k1_a\" : \"konst1.a\"\n"
    "// \"k2_r\" : \"konst2.r\"\n"
    "// \"k2_g\" : \"konst2.g\"\n"
    "// \"k2_b\" : \"konst2.b\"\n"
    "// \"k2_a\" : \"konst2.a\"\n"
    "// \"k3_r\" : \"konst3.r\"\n"
    "// \"k3_g\" : \"konst3.g\"\n"
    "// \"k3_b\" : \"konst3.b\"\n"
    "// \"k3_a\" : \"konst3.a\"\n"
    "// \"8_8\"  : \"konst_8_8.a\"\n"
    "// \"7_8\"  : \"konst_7_8.a\"\n"
    "// \"6_8\"  : \"konst_6_8.a\"\n"
    "// \"5_8\"  : \"konst_5_8.a\"\n"
    "// \"4_8\"  : \"konst_4_8.a\"\n"
    "// \"3_8\"  : \"konst_3_8.a\"\n"
    "// \"2_8\"  : \"konst_2_8.a\"\n"
    "// \"1_8\"  : \"konst_1_8.a\"\n"
    "#define stage_alpha0_konst\t\tkonst_8_8.a\n"
    "\n"
    "#define stage_alpha0_bias       bias_zero_a\n"
    "#define stage_alpha0_scale      scale_1\n"
    "#define stage_alpha0_out_reg    prev\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage_ind0_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage1_tex_map_order\tstage0_tex_map_order\n"
    "#define stage1_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage1_ras_order\t\tstage0_ras_order\n"
    "#define stage1_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage1_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color1_a          stage_color0_a\n"
    "#define stage_color1_b          stage_color0_b\n"
    "#define stage_color1_c          stage_color0_c\n"
    "#define stage_color1_d          stage_color0_d\n"
    "#define stage_color1_konst\t\tstage_color0_konst\n"
    "#define stage_color1_op         stage_color0_op\n"
    "#define stage_color1_bias       stage_color0_bias\n"
    "#define stage_color1_scale      stage_color0_scale\n"
    "#define stage_color1_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha1_a          stage_alpha0_a\n"
    "#define stage_alpha1_b          stage_alpha0_b\n"
    "#define stage_alpha1_c          stage_alpha0_c\n"
    "#define stage_alpha1_d          stage_alpha0_d\n"
    "#define stage_alpha1_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha1_op         stage_alpha0_op\n"
    "#define stage_alpha1_bias       stage_alpha0_bias\n"
    "#define stage_alpha1_scale      stage_alpha0_scale\n"
    "#define stage_alpha1_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind1_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage2_tex_map_order\tstage0_tex_map_order\n"
    "#define stage2_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage2_ras_order\t\tstage0_ras_order\n"
    "#define stage2_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage2_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color2_a          stage_color0_a\n"
    "#define stage_color2_b          stage_color0_b\n"
    "#define stage_color2_c          stage_color0_c\n"
    "#define stage_color2_d          stage_color0_d\n"
    "#define stage_color2_konst\t\tstage_color0_konst\n"
    "#define stage_color2_op         stage_color0_op\n"
    "#define stage_color2_bias       stage_color0_bias\n"
    "#define stage_color2_scale      stage_color0_scale\n"
    "#define stage_color2_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha2_a          stage_alpha0_a\n"
    "#define stage_alpha2_b          stage_alpha0_b\n"
    "#define stage_alpha2_c          stage_alpha0_c\n"
    "#define stage_alpha2_d          stage_alpha0_d\n"
    "#define stage_alpha2_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha2_op         stage_alpha0_op\n"
    "#define stage_alpha2_bias       stage_alpha0_bias\n"
    "#define stage_alpha2_scale      stage_alpha0_scale\n"
    "#define stage_alpha2_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind2_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage3_tex_map_order\tstage0_tex_map_order\n"
    "#define stage3_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage3_ras_order\t\tstage0_ras_order\n"
    "#define stage3_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage3_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color3_a          stage_color0_a\n"
    "#define stage_color3_b          stage_color0_b\n"
    "#define stage_color3_c          stage_color0_c\n"
    "#define stage_color3_d          stage_color0_d\n"
    "#define stage_color3_konst\t\tstage_color0_konst\n"
    "#define stage_color3_op         stage_color0_op\n"
    "#define stage_color3_bias       stage_color0_bias\n"
    "#define stage_color3_scale      stage_color0_scale\n"
    "#define stage_color3_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha3_a          stage_alpha0_a\n"
    "#define stage_alpha3_b          stage_alpha0_b\n"
    "#define stage_alpha3_c          stage_alpha0_c\n"
    "#define stage_alpha3_d          stage_alpha0_d\n"
    "#define stage_alpha3_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha3_op         stage_alpha0_op\n"
    "#define stage_alpha3_bias       stage_alpha0_bias\n"
    "#define stage_alpha3_scale      stage_alpha0_scale\n"
    "#define stage_alpha3_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind3_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage4_tex_map_order\tstage0_tex_map_order\n"
    "#define stage4_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage4_ras_order\t\tstage0_ras_order\n"
    "#define stage4_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage4_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color4_a          stage_color0_a\n"
    "#define stage_color4_b          stage_color0_b\n"
    "#define stage_color4_c          stage_color0_c\n"
    "#define stage_color4_d          stage_color0_d\n"
    "#define stage_color4_konst\t\tstage_color0_konst\n"
    "#define stage_color4_op         stage_color0_op\n"
    "#define stage_color4_bias       stage_color0_bias\n"
    "#define stage_color4_scale      stage_color0_scale\n"
    "#define stage_color4_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha4_a          stage_alpha0_a\n"
    "#define stage_alpha4_b          stage_alpha0_b\n"
    "#define stage_alpha4_c          stage_alpha0_c\n"
    "#define stage_alpha4_d          stage_alpha0_d\n"
    "#define stage_alpha4_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha4_op         stage_alpha0_op\n"
    "#define stage_alpha4_bias       stage_alpha0_bias\n"
    "#define stage_alpha4_scale      stage_alpha0_scale\n"
    "#define stage_alpha4_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind4_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage5_tex_map_order\tstage0_tex_map_order\n"
    "#define stage5_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage5_ras_order\t\tstage0_ras_order\n"
    "#define stage5_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage5_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color5_a          stage_color0_a\n"
    "#define stage_color5_b          stage_color0_b\n"
    "#define stage_color5_c          stage_color0_c\n"
    "#define stage_color5_d          stage_color0_d\n"
    "#define stage_color5_konst\t\tstage_color0_konst\n"
    "#define stage_color5_op         stage_color0_op\n"
    "#define stage_color5_bias       stage_color0_bias\n"
    "#define stage_color5_scale      stage_color0_scale\n"
    "#define stage_color5_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha5_a          stage_alpha0_a\n"
    "#define stage_alpha5_b          stage_alpha0_b\n"
    "#define stage_alpha5_c          stage_alpha0_c\n"
    "#define stage_alpha5_d          stage_alpha0_d\n"
    "#define stage_alpha5_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha5_op         stage_alpha0_op\n"
    "#define stage_alpha5_bias       stage_alpha0_bias\n"
    "#define stage_alpha5_scale      stage_alpha0_scale\n"
    "#define stage_alpha5_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind5_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage6_tex_map_order\tstage0_tex_map_order\n"
    "#define stage6_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage6_ras_order\t\tstage0_ras_order\n"
    "#define stage6_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage6_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color6_a          stage_color0_a\n"
    "#define stage_color6_b          stage_color0_b\n"
    "#define stage_color6_c          stage_color0_c\n"
    "#define stage_color6_d          stage_color0_d\n"
    "#define stage_color6_konst\t\tstage_color0_konst\n"
    "#define stage_color6_op         stage_color0_op\n"
    "#define stage_color6_bias       stage_color0_bias\n"
    "#define stage_color6_scale      stage_color0_scale\n"
    "#define stage_color6_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha6_a          stage_alpha0_a\n"
    "#define stage_alpha6_b          stage_alpha0_b\n"
    "#define stage_alpha6_c          stage_alpha0_c\n"
    "#define stage_alpha6_d          stage_alpha0_d\n"
    "#define stage_alpha6_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha6_op         stage_alpha0_op\n"
    "#define stage_alpha6_bias       stage_alpha0_bias\n"
    "#define stage_alpha6_scale      stage_alpha0_scale\n"
    "#define stage_alpha6_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind6_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage7_tex_map_order\tstage0_tex_map_order\n"
    "#define stage7_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage7_ras_order\t\tstage0_ras_order\n"
    "#define stage7_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage7_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color7_a          stage_color0_a\n"
    "#define stage_color7_b          stage_color0_b\n"
    "#define stage_color7_c          stage_color0_c\n"
    "#define stage_color7_d          stage_color0_d\n"
    "#define stage_color7_konst\t\tstage_color0_konst\n"
    "#define stage_color7_op         stage_color0_op\n"
    "#define stage_color7_bias       stage_color0_bias\n"
    "#define stage_color7_scale      stage_color0_scale\n"
    "#define stage_color7_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha7_a          stage_alpha0_a\n"
    "#define stage_alpha7_b          stage_alpha0_b\n"
    "#define stage_alpha7_c          stage_alpha0_c\n"
    "#define stage_alpha7_d          stage_alpha0_d\n"
    "#define stage_alpha7_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha7_op         stage_alpha0_op\n"
    "#define stage_alpha7_bias       stage_alpha0_bias\n"
    "#define stage_alpha7_scale      stage_alpha0_scale\n"
    "#define stage_alpha7_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind7_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// マテリアル\n"
    "//------------------------------------------------------------------------------\n"
    "layout(std140) uniform Mat\n"
    "{\n"
    "    vec4        mat_color0;       // @@ id=\"mat_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        mat_color1;       // @@ id=\"mat_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        amb_color0;       // @@ id=\"amb_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        amb_color1;       // @@ id=\"amb_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color0;       // @@ id=\"tev_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color1;       // @@ id=\"tev_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color2;       // @@ id=\"tev_color2\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst0;           // @@ id=\"konst0\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst1;           // @@ id=\"konst1\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst2;           // @@ id=\"konst2\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst3;           // @@ id=\"konst3\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4\t\tind_texmtx0[ 2 ]; // @@ id=\"ind_texmtx0\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\tind_texmtx1[ 2 ]; // @@ id=\"ind_texmtx1\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\tind_texmtx2[ 2 ]; // @@ id=\"ind_texmtx2\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\ttexmtx0[ 3 ];     // @@ id=\"texmtx0\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo0\"\n"
    "    vec4\t\ttexmtx1[ 3 ];     // @@ id=\"texmtx1\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo1\"\n"
    "    vec4\t\ttexmtx2[ 3 ];     // @@ id=\"texmtx2\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo2\"\n"
    "    vec4\t\ttexmtx3[ 3 ];     // @@ id=\"texmtx3\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo3\"\n"
    "    vec4\t\ttexmtx4[ 3 ];     // @@ id=\"texmtx4\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo4\"\n"
    "    vec4\t\ttexmtx5[ 3 ];     // @@ id=\"texmtx5\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo5\"\n"
    "    vec4\t\ttexmtx6[ 3 ];     // @@ id=\"texmtx6\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo6\"\n"
    "    vec4\t\ttexmtx7[ 3 ];     // @@ id=\"texmtx7\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo7\"\n"
    "};\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// テクスチャ\n"
    "//------------------------------------------------------------------------------\n"
    "uniform sampler2D tex_map0; // @@ id=\"_a0\" hint=\"albedo0\"\n"
    "uniform sampler2D tex_map1; // @@ id=\"_a1\" hint=\"albedo1\"\n"
    "uniform sampler2D tex_map2; // @@ id=\"_a2\" hint=\"albedo2\"\n"
    "uniform sampler2D tex_map3; // @@ id=\"_a3\" hint=\"albedo3\"\n"
    "uniform sampler2D tex_map4; // @@ id=\"_a4\" hint=\"albedo4\"\n"
    "uniform sampler2D tex_map5; // @@ id=\"_a5\" hint=\"albedo5\"\n"
    "uniform sampler2D tex_map6; // @@ id=\"_a6\" hint=\"albedo6\"\n"
    "uniform sampler2D tex_map7; // @@ id=\"_a7\" hint=\"albedo7\"\n"
    "\n"
    "in      vec2   tex_coord0;\n"
    "in      vec2   tex_coord1;\n"
    "in      vec2   tex_coord2;\n"
    "in      vec2   tex_coord3;\n"
    "in      vec2   tex_coord4;\n"
    "in      vec2   tex_coord5;\n"
    "in      vec2   tex_coord6;\n"
    "in      vec2   tex_coord7;\n"
    "in      vec4   color0a0;\n"
    "in      vec4   color1a1;\n"
    "in      vec4   fog_color;\n"
    "// red-pro2\r\n"
    "in      vec3   normal;\n"
    "\n"
    "#define one    const_one\n"
    "#define zero   const_zero\n"
    "#define half   const_half\n"
    "\n"
    "// for swizzle accsess\n"
    "const vec4 const_zero = vec4( 0.0 );\n"
    "const vec4 const_half = vec4( 0.5 );\n"
    "const vec4 const_one  = vec4( 1.0 );\n"
    "const vec4 konst_8_8  = konst_color8( 8.0 );\n"
    "const vec4 konst_7_8  = konst_color8( 7.0 );\n"
    "const vec4 konst_6_8  = konst_color8( 6.0 );\n"
    "const vec4 konst_5_8  = konst_color8( 5.0 );\n"
    "const vec4 konst_4_8  = konst_color8( 4.0 );\n"
    "const vec4 konst_3_8  = konst_color8( 3.0 );\n"
    "const vec4 konst_2_8  = konst_color8( 2.0 );\n"
    "const vec4 konst_1_8  = konst_color8( 1.0 );\n"
    "const vec4 color_null = const_one;\n"
    "\n"
    "void main( void )\n"
    "{\n"
    "#if ( tev_stage_num < 0 || TEV_STAGE_MAX < tev_stage_num )\n"
    "#   error\n"
    "#endif\n"
    "\n"
    "#if ( ind_stage_num < 0 || IND_STAGE_MAX < ind_stage_num )\n"
    "#   error\n"
    "#endif\n"
    "\n"
    "    vec2 ind_offset0_ = vec2( 0.0 );\n"
    "    vec2 ind_offset1_ = vec2( 0.0 );\n"
    "    vec2 ind_offset2_ = vec2( 0.0 );\n"
    "    vec2 ind_offset3_ = vec2( 0.0 );\n"
    "\n"
    "    // indirect\n"
    "#if ( 0 < ind_stage_num )\n"
    "    calc_ind_stage( 0 );\n"
    "#endif\n"
    "\n"
    "#if ( 1 < ind_stage_num )\n"
    "    calc_ind_stage( 1 );\n"
    "#endif\n"
    "\n"
    "#if ( 2 < ind_stage_num )\n"
    "    calc_ind_stage( 2 );\n"
    "#endif\n"
    "\n"
    "#if ( 3 < ind_stage_num )\n"
    "    calc_ind_stage( 3 );\n"
    "#endif\n"
    "\n"
    "    // tev stage\n"
    "    vec4 reg0 = tev_color0;\n"
    "    vec4 reg1 = tev_color1;\n"
    "    vec4 reg2 = tev_color2;\n"
    "    vec4 prev = one;\n"
    "\n"
    "#if ( 0 < tev_stage_num )\n"
    "    calc_tev_stage( 0 );\n"
    "#endif\n"
    "\n"
    "#if ( 1 < tev_stage_num )\n"
    "    calc_tev_stage( 1 );\n"
    "#endif\n"
    "\n"
    "#if ( 2 < tev_stage_num )\n"
    "    calc_tev_stage( 2 );\n"
    "#endif\n"
    "\n"
    "#if ( 3 < tev_stage_num )\n"
    "    calc_tev_stage( 3 );\n"
    "#endif\n"
    "\n"
    "#if ( 4 < tev_stage_num )\n"
    "    calc_tev_stage( 4 );\n"
    "#endif\n"
    "\n"
    "#if ( 5 < tev_stage_num )\n"
    "    calc_tev_stage( 5 );\n"
    "#endif\n"
    "\n"
    "#if ( 6 < tev_stage_num )\n"
    "    calc_tev_stage( 6 );\n"
    "#endif\n"
    "\n"
    "#if ( 7 < tev_stage_num )\n"
    "    calc_tev_stage( 7 );\n"
    "#endif\n"
    "\n"
    "    gl_FragData[ 0 ].rgb = mix( prev.rgb, fog_color.rgb, fog_color.a );\n"
    "    gl_FragData[ 0 ].a   = prev.a;\n"
    "    \n"
    "    gl_FragData[ 1 ].rgb = normalize( normal ) * 0.5 + 0.5;\n"
    "    gl_FragData[ 1 ].a   = 1.0;   \n"
    "}\n"
    "\n"
    "\n"
    "\x00",

    // (NSMBU) wii_pipeline_fs.sh (old)
    "//------------------------------------------------------------------------------\n"
    "/** @file   wii_pipleline_fs.sh\n"
    " *  @brief  wiiのパイプラインエミュレータ（フラグメント）\n"
    " *  @author Takuhiro Dohta\n"
    " */\n"
    "//------------------------------------------------------------------------------\n"
    "#version 150\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// ハード仕様\n"
    "//------------------------------------------------------------------------------\n"
    "#define TEV_STAGE_MAX   \t( 8 )\n"
    "#define IND_STAGE_MAX   \t( 4 )\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// マクロ定義\n"
    "//------------------------------------------------------------------------------\n"
    "#define konst_color8( x )\t\t\tvec4( x / 8.0 )\n"
    "#define expand_swap_table( n )\t\tswap_table##n\n"
    "#define swap_table( c, n )\t\t\tc.expand_swap_table( n )\n"
    "#define tev_tex_fetch( n )\t\t\ttexture( stage##n##_tex_map_order, stage##n##_tex_coord_order + tex_offset )\n"
    "#define ind_tex_fetch( n )\t\t\ttexture( ind_stage##n##_tex_map_order, ind_stage##n##_tex_coord_order )\n"
    "\n"
    "#define calc_tev_rgb( ca, cb, cc, cd, op, bias, scale )  \tclamp( ( ( cd ) + ( op ) * ( ( one.rgb - ( cc ) ) * ( ca ) + ( cc ) * ( cb ) ) + ( bias.rgb ) ) * ( scale ), 0.0, 1.0 )\n"
    "#define calc_tev_alpha( aa, ab, ac, ad, op, bias, scale )\tclamp( ( ( ad ) + ( op ) * ( ( one.a   - ( ac ) ) * ( aa ) + ( ac ) * ( ab ) ) + ( bias.a   ) ) * ( scale ), 0.0, 1.0 )\n"
    "\n"
    "#define calc_tev_stage( n )                                                                 \\\n"
    "{                                                                                           \\\n"
    "    vec2 tex_offset   = stage_ind##n##_offset / textureSize( stage##n##_tex_map_order, 0 ); \\\n"
    "    vec4 ras          = swap_table( stage##n##_ras_order, stage##n##_ras_swap );            \\\n"
    "    vec4 tex          = swap_table( tev_tex_fetch( n ), stage##n##_tex_map_swap );          \\\n"
    "    vec3 konst_color  = stage_color##n##_konst;                                             \\\n"
    "    float konst_alpha = stage_alpha##n##_konst;                                             \\\n"
    "                                                                                            \\\n"
    "    stage_color##n##_out_reg.rgb = calc_tev_rgb( stage_color##n##_a,                        \\\n"
    "                                                 stage_color##n##_b,                        \\\n"
    "                                                 stage_color##n##_c,                        \\\n"
    "                                                 stage_color##n##_d,                        \\\n"
    "                                                 stage_color##n##_op,                       \\\n"
    "                                                 stage_color##n##_bias,                     \\\n"
    "                                                 stage_color##n##_scale                     \\\n"
    "                                                 );                                         \\\n"
    "                                                                                            \\\n"
    "    stage_alpha##n##_out_reg.a = calc_tev_alpha( stage_alpha##n##_a,                        \\\n"
    "                                                 stage_alpha##n##_b,                        \\\n"
    "                                                 stage_alpha##n##_c,                        \\\n"
    "                                                 stage_alpha##n##_d,                        \\\n"
    "                                                 stage_alpha##n##_op,                       \\\n"
    "                                                 stage_alpha##n##_bias,                     \\\n"
    "                                                 stage_alpha##n##_scale                     \\\n"
    "                                                 );                                         \\\n"
    "}                                                                         \n"
    "\n"
    "#define calc_ind_stage( n )                                                                                        \\\n"
    "{                                                                                                            \t   \\\n"
    "    vec4 tex = ind_tex_fetch( n ) - vec4( 0.5 );                                                                   \\\n"
    "    ind_offset##n = ind_texmtx##n[ 0 ].xy * tex.a + ind_texmtx##n[ 0 ].zw * tex.r + ind_texmtx##n[ 1 ].xy * tex.r; \\\n"
    "    ind_offset##n = ( ind_offset##n ) * 255.0;                                                                     \\\n"
    "}                                                                                                    \n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"indirect_stage_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define ind_stage_num\t\t\t   0\n"
    "\n"
    "// attr : \"tex_map_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"ind_tex_map0\", \"ind_tex_map0\" - \"ind_tex_map7\" \n"
    "#define ind_stage0_tex_map_order   tex_map0\n"
    "\n"
    "// attr : \"tex_coord_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"ind_tex_coord0\", \"ind_tex_coord0\" - \"ind_tex_coord7\"\n"
    "#define ind_stage0_tex_coord_order tex_coord0\n"
    "\n"
    "#define ind_stage1_tex_map_order   tex_map1\n"
    "#define ind_stage1_tex_coord_order tex_coord1\n"
    "#define ind_stage2_tex_map_order   tex_map2\n"
    "#define ind_stage2_tex_coord_order tex_coord2\n"
    "#define ind_stage3_tex_map_order   tex_map3\n"
    "#define ind_stage3_tex_coord_order tex_coord3\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"add_indirect_combination_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define ind_combination_num     0\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define tev_stage_num\t\t\t8\n"
    "\n"
    "// attr : \"swap_table0\" - \"swap_table3\"\n"
    "\n"
    "// ex.\"r g b a\" : \"rgba\"\n"
    "// ex.\"r r r b\" : \"rrrb\"\n"
    "#define swap_table0\t\t\t\trgba\n"
    "#define swap_table1\t\t\t\trgba\n"
    "#define swap_table2\t\t\t\trgba\n"
    "#define swap_table3\t\t\t\trgba\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage\"\n"
    "\n"
    "// attr : \"ras_order\"\n"
    "\n"
    "// \"color0a0\"   : \"color0a0\"\n"
    "// \"color1a1\"   : \"color1a1\"\n"
    "// \"color_null\" : \"color_null\"\n"
    "#define stage0_ras_order\t\tcolor0a0\n"
    "\n"
    "// attr : \"tex_map_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"tex_map0\", \"tex_map0\" - \"tex_map7\"\n"
    "#define stage0_tex_map_order\ttex_map0\n"
    "\n"
    "// attr : \"tex_coord_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"tex_coord0\", \"tex_coord0\" - \"tex_coord7\"\n"
    "#define stage0_tex_coord_order\ttex_coord0\n"
    "\n"
    "// attr : \"ras_swap\"\n"
    "\n"
    "// \"0\" - \"3\" : \"0\" - \"3\"\n"
    "#define stage0_ras_swap\t\t\t0\n"
    "\n"
    "// attr : \"tex_map_swap\"\n"
    "\n"
    "// \"0\" - \"3\" : \"0\"-\"3\"\n"
    "#define stage0_tex_map_swap\t\t0\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_color\"\n"
    "\n"
    "// attr : \"a\", \"b\", \"c\", \"d\"\n"
    "\n"
    "// \"rasc\"   : \"ras.rgb\"\n"
    "// \"rasa\"   : \"ras.a\"\n"
    "// \"texc\"   : \"tex.rgb\"\n"
    "// \"texa\"   : \"tex.a\"\n"
    "// \"c0\"     : \"reg0.rgb\"\n"
    "// \"a0\"     : \"reg0.aaa\"\n"
    "// \"c1\"     : \"reg1.rgb\"\n"
    "// \"a1\"     : \"reg1.aaa\"\n"
    "// \"c2\"     : \"reg2.rgb\"\n"
    "// \"a2\"     : \"reg2.aaa\"\n"
    "// \"cprev\"  : \"prev.rgb\"\n"
    "// \"aprev\"  : \"prev.aaa\"\n"
    "// \"konst\"  : \"konst_color.rgb\"\n"
    "// \"zero\"   : \"zero.rgb\"\n"
    "// \"half\"   : \"half_rgb\"\n"
    "// \"one\"    : \"one.rgb\"\n"
    "#define stage_color0_a          zero.rgb\n"
    "#define stage_color0_b          tex.rgb\n"
    "#define stage_color0_c          ras.rgb\n"
    "#define stage_color0_d          zero.rgb\n"
    "\n"
    "// attr   : \"constant\"\n"
    "\n"
    "// \"k0\"   : \"konst0.rgb\"\n"
    "// \"k0_r\" : \"konst0.rrr\"\n"
    "// \"k0_g\" : \"konst0.ggg\"\n"
    "// \"k0_b\" : \"konst0.bbb\"\n"
    "// \"k0_a\" : \"konst0.aaa\"\n"
    "// \"k1\"   : \"konst1.rgb\"\n"
    "// \"k1_r\" : \"konst1.rrr\"\n"
    "// \"k1_g\" : \"konst1.ggg\"\n"
    "// \"k1_b\" : \"konst1.bbb\"\n"
    "// \"k1_a\" : \"konst1.aaa\"\n"
    "// \"k2\"   : \"konst2.rgb\"\n"
    "// \"k2_r\" : \"konst2.rrr\"\n"
    "// \"k2_g\" : \"konst2.ggg\"\n"
    "// \"k2_b\" : \"konst2.bbb\"\n"
    "// \"k2_a\" : \"konst2.aaa\"\n"
    "// \"k3\"   : \"konst3.rgb\"\n"
    "// \"k3_r\" : \"konst3.rrr\"\n"
    "// \"k3_g\" : \"konst3.ggg\"\n"
    "// \"k3_b\" : \"konst3.bbb\"\n"
    "// \"k3_a\" : \"konst3.aaa\"\n"
    "// \"8_8\"  : \"konst_8_8.rgb\"\n"
    "// \"7_8\"  : \"konst_7_8.rgb\"\n"
    "// \"6_8\"  : \"konst_6_8.rgb\"\n"
    "// \"5_8\"  : \"konst_5_8.rgb\"\n"
    "// \"4_8\"  : \"konst_4_8.rgb\"\n"
    "// \"3_8\"  : \"konst_3_8.rgb\"\n"
    "// \"2_8\"  : \"konst_2_8.rgb\"\n"
    "// \"1_8\"  : \"konst_1_8.rgb\"\n"
    "#define stage_color0_konst\t\tkonst_8_8.rgb\n"
    "\n"
    "// attr : \"op\"\n"
    "\n"
    "// \"add\" : \"op_add\"\n"
    "// \"sub\" : \"op_sub\"\n"
    "#define stage_color0_op         op_add\n"
    "\n"
    "// attr : \"bias\"\n"
    "\n"
    "// \"zero\"     : \"zero\"\n"
    "// \"sub_half\" : \"sub_half\"\n"
    "// \"add_half\" : \"add_half\"\n"
    "#define stage_color0_bias       zero\n"
    "\n"
    "// attr : \"scale\"\n"
    "\n"
    "// \"divide_2\" : \"divide_2\n"
    "// \"scale_1\"  : \"scale_1\n"
    "// \"scale_2\"  : \"scale_2\n"
    "// \"scale_4\"  : \"scale_4\n"
    "#define stage_color0_scale      scale_1\n"
    "\n"
    "// attr : \"out_reg\"\n"
    "\n"
    "// \"reg0\" : \"reg0\"\n"
    "// \"reg1\" : \"reg1\"\n"
    "// \"reg2\" : \"reg2\"\n"
    "// \"prev\" : \"prev\"\n"
    "#define stage_color0_out_reg    prev\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_alpha\"\n"
    "\n"
    "// attr : \"a\", \"b\", \"c\", \"d\"\n"
    "\n"
    "// \"rasa\"   : \"ras.a\"\n"
    "// \"texa\"   : \"tex.a\"\n"
    "// \"a0\"     : \"reg0.a\"\n"
    "// \"a1\"     : \"reg1.a\"\n"
    "// \"a2\"     : \"reg2.a\"\n"
    "// \"aprev\"  : \"prev.a\"\n"
    "// \"konst\"  : \"konst_alpha\"\n"
    "// \"zero\"   : \"zero.a\"\n"
    "#define stage_alpha0_a          zero.a\n"
    "#define stage_alpha0_b          tex.a\n"
    "#define stage_alpha0_c          ras.a\n"
    "#define stage_alpha0_d          zero.a\n"
    "#define stage_alpha0_op         op_add\n"
    "\n"
    "// attr   : \"constant\"\n"
    "\n"
    "// \"k0_r\" : \"konst0.r\"\n"
    "// \"k0_g\" : \"konst0.g\"\n"
    "// \"k0_b\" : \"konst0.b\"\n"
    "// \"k0_a\" : \"konst0.a\"\n"
    "// \"k1_r\" : \"konst1.r\"\n"
    "// \"k1_g\" : \"konst1.g\"\n"
    "// \"k1_b\" : \"konst1.b\"\n"
    "// \"k1_a\" : \"konst1.a\"\n"
    "// \"k2_r\" : \"konst2.r\"\n"
    "// \"k2_g\" : \"konst2.g\"\n"
    "// \"k2_b\" : \"konst2.b\"\n"
    "// \"k2_a\" : \"konst2.a\"\n"
    "// \"k3_r\" : \"konst3.r\"\n"
    "// \"k3_g\" : \"konst3.g\"\n"
    "// \"k3_b\" : \"konst3.b\"\n"
    "// \"k3_a\" : \"konst3.a\"\n"
    "// \"8_8\"  : \"konst_8_8.a\"\n"
    "// \"7_8\"  : \"konst_7_8.a\"\n"
    "// \"6_8\"  : \"konst_6_8.a\"\n"
    "// \"5_8\"  : \"konst_5_8.a\"\n"
    "// \"4_8\"  : \"konst_4_8.a\"\n"
    "// \"3_8\"  : \"konst_3_8.a\"\n"
    "// \"2_8\"  : \"konst_2_8.a\"\n"
    "// \"1_8\"  : \"konst_1_8.a\"\n"
    "#define stage_alpha0_konst\t\tkonst_8_8.a\n"
    "\n"
    "#define stage_alpha0_bias       zero\n"
    "#define stage_alpha0_scale      scale_1\n"
    "#define stage_alpha0_out_reg    prev\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage_ind0_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage1_tex_map_order\tstage0_tex_map_order\n"
    "#define stage1_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage1_ras_order\t\tstage0_ras_order\n"
    "#define stage1_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage1_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color1_a          stage_color0_a\n"
    "#define stage_color1_b          stage_color0_b\n"
    "#define stage_color1_c          stage_color0_c\n"
    "#define stage_color1_d          stage_color0_d\n"
    "#define stage_color1_konst\t\tstage_color0_konst\n"
    "#define stage_color1_op         stage_color0_op\n"
    "#define stage_color1_bias       stage_color0_bias\n"
    "#define stage_color1_scale      stage_color0_scale\n"
    "#define stage_color1_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha1_a          stage_alpha0_a\n"
    "#define stage_alpha1_b          stage_alpha0_b\n"
    "#define stage_alpha1_c          stage_alpha0_c\n"
    "#define stage_alpha1_d          stage_alpha0_d\n"
    "#define stage_alpha1_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha1_op         stage_alpha0_op\n"
    "#define stage_alpha1_bias       stage_alpha0_bias\n"
    "#define stage_alpha1_scale      stage_alpha0_scale\n"
    "#define stage_alpha1_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind1_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage2_tex_map_order\tstage0_tex_map_order\n"
    "#define stage2_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage2_ras_order\t\tstage0_ras_order\n"
    "#define stage2_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage2_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color2_a          stage_color0_a\n"
    "#define stage_color2_b          stage_color0_b\n"
    "#define stage_color2_c          stage_color0_c\n"
    "#define stage_color2_d          stage_color0_d\n"
    "#define stage_color2_konst\t\tstage_color0_konst\n"
    "#define stage_color2_op         stage_color0_op\n"
    "#define stage_color2_bias       stage_color0_bias\n"
    "#define stage_color2_scale      stage_color0_scale\n"
    "#define stage_color2_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha2_a          stage_alpha0_a\n"
    "#define stage_alpha2_b          stage_alpha0_b\n"
    "#define stage_alpha2_c          stage_alpha0_c\n"
    "#define stage_alpha2_d          stage_alpha0_d\n"
    "#define stage_alpha2_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha2_op         stage_alpha0_op\n"
    "#define stage_alpha2_bias       stage_alpha0_bias\n"
    "#define stage_alpha2_scale      stage_alpha0_scale\n"
    "#define stage_alpha2_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind2_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage3_tex_map_order\tstage0_tex_map_order\n"
    "#define stage3_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage3_ras_order\t\tstage0_ras_order\n"
    "#define stage3_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage3_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color3_a          stage_color0_a\n"
    "#define stage_color3_b          stage_color0_b\n"
    "#define stage_color3_c          stage_color0_c\n"
    "#define stage_color3_d          stage_color0_d\n"
    "#define stage_color3_konst\t\tstage_color0_konst\n"
    "#define stage_color3_op         stage_color0_op\n"
    "#define stage_color3_bias       stage_color0_bias\n"
    "#define stage_color3_scale      stage_color0_scale\n"
    "#define stage_color3_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha3_a          stage_alpha0_a\n"
    "#define stage_alpha3_b          stage_alpha0_b\n"
    "#define stage_alpha3_c          stage_alpha0_c\n"
    "#define stage_alpha3_d          stage_alpha0_d\n"
    "#define stage_alpha3_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha3_op         stage_alpha0_op\n"
    "#define stage_alpha3_bias       stage_alpha0_bias\n"
    "#define stage_alpha3_scale      stage_alpha0_scale\n"
    "#define stage_alpha3_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind3_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage4_tex_map_order\tstage0_tex_map_order\n"
    "#define stage4_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage4_ras_order\t\tstage0_ras_order\n"
    "#define stage4_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage4_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color4_a          stage_color0_a\n"
    "#define stage_color4_b          stage_color0_b\n"
    "#define stage_color4_c          stage_color0_c\n"
    "#define stage_color4_d          stage_color0_d\n"
    "#define stage_color4_konst\t\tstage_color0_konst\n"
    "#define stage_color4_op         stage_color0_op\n"
    "#define stage_color4_bias       stage_color0_bias\n"
    "#define stage_color4_scale      stage_color0_scale\n"
    "#define stage_color4_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha4_a          stage_alpha0_a\n"
    "#define stage_alpha4_b          stage_alpha0_b\n"
    "#define stage_alpha4_c          stage_alpha0_c\n"
    "#define stage_alpha4_d          stage_alpha0_d\n"
    "#define stage_alpha4_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha4_op         stage_alpha0_op\n"
    "#define stage_alpha4_bias       stage_alpha0_bias\n"
    "#define stage_alpha4_scale      stage_alpha0_scale\n"
    "#define stage_alpha4_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind4_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage5_tex_map_order\tstage0_tex_map_order\n"
    "#define stage5_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage5_ras_order\t\tstage0_ras_order\n"
    "#define stage5_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage5_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color5_a          stage_color0_a\n"
    "#define stage_color5_b          stage_color0_b\n"
    "#define stage_color5_c          stage_color0_c\n"
    "#define stage_color5_d          stage_color0_d\n"
    "#define stage_color5_konst\t\tstage_color0_konst\n"
    "#define stage_color5_op         stage_color0_op\n"
    "#define stage_color5_bias       stage_color0_bias\n"
    "#define stage_color5_scale      stage_color0_scale\n"
    "#define stage_color5_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha5_a          stage_alpha0_a\n"
    "#define stage_alpha5_b          stage_alpha0_b\n"
    "#define stage_alpha5_c          stage_alpha0_c\n"
    "#define stage_alpha5_d          stage_alpha0_d\n"
    "#define stage_alpha5_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha5_op         stage_alpha0_op\n"
    "#define stage_alpha5_bias       stage_alpha0_bias\n"
    "#define stage_alpha5_scale      stage_alpha0_scale\n"
    "#define stage_alpha5_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind5_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage6_tex_map_order\tstage0_tex_map_order\n"
    "#define stage6_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage6_ras_order\t\tstage0_ras_order\n"
    "#define stage6_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage6_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color6_a          stage_color0_a\n"
    "#define stage_color6_b          stage_color0_b\n"
    "#define stage_color6_c          stage_color0_c\n"
    "#define stage_color6_d          stage_color0_d\n"
    "#define stage_color6_konst\t\tstage_color0_konst\n"
    "#define stage_color6_op         stage_color0_op\n"
    "#define stage_color6_bias       stage_color0_bias\n"
    "#define stage_color6_scale      stage_color0_scale\n"
    "#define stage_color6_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha6_a          stage_alpha0_a\n"
    "#define stage_alpha6_b          stage_alpha0_b\n"
    "#define stage_alpha6_c          stage_alpha0_c\n"
    "#define stage_alpha6_d          stage_alpha0_d\n"
    "#define stage_alpha6_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha6_op         stage_alpha0_op\n"
    "#define stage_alpha6_bias       stage_alpha0_bias\n"
    "#define stage_alpha6_scale      stage_alpha0_scale\n"
    "#define stage_alpha6_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind6_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage7_tex_map_order\tstage0_tex_map_order\n"
    "#define stage7_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage7_ras_order\t\tstage0_ras_order\n"
    "#define stage7_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage7_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color7_a          stage_color0_a\n"
    "#define stage_color7_b          stage_color0_b\n"
    "#define stage_color7_c          stage_color0_c\n"
    "#define stage_color7_d          stage_color0_d\n"
    "#define stage_color7_konst\t\tstage_color0_konst\n"
    "#define stage_color7_op         stage_color0_op\n"
    "#define stage_color7_bias       stage_color0_bias\n"
    "#define stage_color7_scale      stage_color0_scale\n"
    "#define stage_color7_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha7_a          stage_alpha0_a\n"
    "#define stage_alpha7_b          stage_alpha0_b\n"
    "#define stage_alpha7_c          stage_alpha0_c\n"
    "#define stage_alpha7_d          stage_alpha0_d\n"
    "#define stage_alpha7_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha7_op         stage_alpha0_op\n"
    "#define stage_alpha7_bias       stage_alpha0_bias\n"
    "#define stage_alpha7_scale      stage_alpha0_scale\n"
    "#define stage_alpha7_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind7_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// マテリアル\n"
    "//------------------------------------------------------------------------------\n"
    "layout(std140) uniform Mat\n"
    "{\n"
    "    vec4        mat_color0;       // @@ id=\"mat_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        mat_color1;       // @@ id=\"mat_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        amb_color0;       // @@ id=\"amb_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        amb_color1;       // @@ id=\"amb_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color0;       // @@ id=\"tev_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color1;       // @@ id=\"tev_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color2;       // @@ id=\"tev_color2\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst0;           // @@ id=\"konst0\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst1;           // @@ id=\"konst1\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst2;           // @@ id=\"konst2\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst3;           // @@ id=\"konst3\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4\t\tind_texmtx0[ 2 ]; // @@ id=\"ind_texmtx0\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\tind_texmtx1[ 2 ]; // @@ id=\"ind_texmtx1\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\tind_texmtx2[ 2 ]; // @@ id=\"ind_texmtx2\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\ttexmtx0[ 3 ];     // @@ id=\"texmtx0\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo0\"\n"
    "    vec4\t\ttexmtx1[ 3 ];     // @@ id=\"texmtx1\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo1\"\n"
    "    vec4\t\ttexmtx2[ 3 ];     // @@ id=\"texmtx2\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo2\"\n"
    "    vec4\t\ttexmtx3[ 3 ];     // @@ id=\"texmtx3\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo3\"\n"
    "    vec4\t\ttexmtx4[ 3 ];     // @@ id=\"texmtx4\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo4\"\n"
    "    vec4\t\ttexmtx5[ 3 ];     // @@ id=\"texmtx5\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo5\"\n"
    "    vec4\t\ttexmtx6[ 3 ];     // @@ id=\"texmtx6\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo6\"\n"
    "    vec4\t\ttexmtx7[ 3 ];     // @@ id=\"texmtx7\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo7\"\n"
    "};\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// テクスチャ\n"
    "//------------------------------------------------------------------------------\n"
    "uniform sampler2D tex_map0; // @@ id=\"_a0\" hint=\"albedo0\"\n"
    "uniform sampler2D tex_map1; // @@ id=\"_a1\" hint=\"albedo1\"\n"
    "uniform sampler2D tex_map2; // @@ id=\"_a2\" hint=\"albedo2\"\n"
    "uniform sampler2D tex_map3; // @@ id=\"_a3\" hint=\"albedo3\"\n"
    "uniform sampler2D tex_map4; // @@ id=\"_a4\" hint=\"albedo4\"\n"
    "uniform sampler2D tex_map5; // @@ id=\"_a5\" hint=\"albedo5\"\n"
    "uniform sampler2D tex_map6; // @@ id=\"_a6\" hint=\"albedo6\"\n"
    "uniform sampler2D tex_map7; // @@ id=\"_a7\" hint=\"albedo7\"\n"
    "\n"
    "in      vec2   tex_coord0;\n"
    "in      vec2   tex_coord1;\n"
    "in      vec2   tex_coord2;\n"
    "in      vec2   tex_coord3;\n"
    "in      vec2   tex_coord4;\n"
    "in      vec2   tex_coord5;\n"
    "in      vec2   tex_coord6;\n"
    "in      vec2   tex_coord7;\n"
    "in      vec4   color0a0;\n"
    "in      vec4   color1a1;\n"
    "in      vec4   fog_color;\n"
    "// red-pro2\r\n"
    "in      vec3   normal;\n"
    "\n"
    "#define one  const_one\n"
    "#define zero const_zero\n"
    "#define half const_half\n"
    "\n"
    "const float divide_2  = 0.5;\n"
    "const float scale_1   = 1.0;\n"
    "const float scale_2   = 2.0;\n"
    "const float scale_4   = 4.0;\n"
    "const float op_add    = 1.0;\n"
    "const float op_sub    = -1.0;\n"
    "\n"
    "// for swizzle accsess\n"
    "const vec4 const_zero = vec4( 0.0 );\n"
    "const vec4 const_half = vec4( 0.5 );\n"
    "const vec4 const_one  = vec4( 1.0 );\n"
    "const vec4 sub_half   = vec4( -0.5 );\n"
    "const vec4 add_half   = vec4( 0.5 );\n"
    "const vec4 konst_8_8  = konst_color8( 8.0 );\n"
    "const vec4 konst_7_8  = konst_color8( 7.0 );\n"
    "const vec4 konst_6_8  = konst_color8( 6.0 );\n"
    "const vec4 konst_5_8  = konst_color8( 5.0 );\n"
    "const vec4 konst_4_8  = konst_color8( 4.0 );\n"
    "const vec4 konst_3_8  = konst_color8( 3.0 );\n"
    "const vec4 konst_2_8  = konst_color8( 2.0 );\n"
    "const vec4 konst_1_8  = konst_color8( 1.0 );\n"
    "const vec4 color_null = const_one;\n"
    "\n"
    "void main( void )\n"
    "{\n"
    "#if ( tev_stage_num < 0 || TEV_STAGE_MAX < tev_stage_num )\n"
    "#   error\n"
    "#endif\n"
    "\n"
    "#if ( ind_stage_num < 0 || IND_STAGE_MAX < ind_stage_num )\n"
    "#   error\n"
    "#endif\n"
    "\n"
    "    vec2 ind_offset0     = vec2( 0.0 );\n"
    "    vec2 ind_offset1     = vec2( 0.0 );\n"
    "    vec2 ind_offset2     = vec2( 0.0 );\n"
    "    vec2 ind_offset3     = vec2( 0.0 );\n"
    "    vec2 ind_offset_null = vec2( 0.0 );\n"
    "\n"
    "    // indirect\n"
    "#if ( 0 < ind_stage_num )\n"
    "    calc_ind_stage( 0 );\n"
    "#endif\n"
    "\n"
    "#if ( 1 < ind_stage_num )\n"
    "    calc_ind_stage( 1 );\n"
    "#endif\n"
    "\n"
    "#if ( 2 < ind_stage_num )\n"
    "    calc_ind_stage( 2 );\n"
    "#endif\n"
    "\n"
    "#if ( 3 < ind_stage_num )\n"
    "    calc_ind_stage( 3 );\n"
    "#endif\n"
    "\n"
    "    // tev stage\n"
    "    vec4 reg0 = tev_color0;\n"
    "    vec4 reg1 = tev_color1;\n"
    "    vec4 reg2 = tev_color2;\n"
    "    vec4 prev = one;\n"
    "\n"
    "#if ( 0 < tev_stage_num )\n"
    "    calc_tev_stage( 0 );\n"
    "#endif\n"
    "\n"
    "#if ( 1 < tev_stage_num )\n"
    "    calc_tev_stage( 1 );\n"
    "#endif\n"
    "\n"
    "#if ( 2 < tev_stage_num )\n"
    "    calc_tev_stage( 2 );\n"
    "#endif\n"
    "\n"
    "#if ( 3 < tev_stage_num )\n"
    "    calc_tev_stage( 3 );\n"
    "#endif\n"
    "\n"
    "#if ( 4 < tev_stage_num )\n"
    "    calc_tev_stage( 4 );\n"
    "#endif\n"
    "\n"
    "#if ( 5 < tev_stage_num )\n"
    "    calc_tev_stage( 5 );\n"
    "#endif\n"
    "\n"
    "#if ( 6 < tev_stage_num )\n"
    "    calc_tev_stage( 6 );\n"
    "#endif\n"
    "\n"
    "#if ( 7 < tev_stage_num )\n"
    "    calc_tev_stage( 7 );\n"
    "#endif\n"
    "\n"
    "    gl_FragData[ 0 ].rgb = mix( prev.rgb, fog_color.rgb, fog_color.a );\n"
    "    gl_FragData[ 0 ].a   = prev.a;\n"
    "    \n"
    "    gl_FragData[ 1 ].rgb = normalize( normal ) * 0.5 + 0.5;\r\n"
    "    gl_FragData[ 1 ].a   = 1.0;   \n"
    "}\n"
    "\n"
    "\n"
    "\x00"
#endif // RIO_IS_WIN
};

static const std::string cStringReplacement_To[STRING_REPLACEMENT_COUNT] = {
#if RIO_IS_WIN
    // (NSMBU) wii_pipeline_fs.sh (new)
    "//------------------------------------------------------------------------------\n"
    "/** @file   wii_pipleline_fs.sh\n"
    " *  @brief  wiiのパイプラインエミュレータ（フラグメント）\n"
    " *  @author Takuhiro Dohta\n"
    " */\n"
    "//------------------------------------------------------------------------------\n"
    "//------------------------------------------------------------------------------\n"
    "// ハード仕様\n"
    "//------------------------------------------------------------------------------\n"
    "#define TEV_STAGE_MAX   \t( 8 )\n"
    "#define IND_STAGE_MAX   \t( 4 )\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// マクロ定義\n"
    "//------------------------------------------------------------------------------\n"
    "#define konst_color8( x )\t\tvec4( x / 8.0 )\n"
    "#define expand_swap_table( n )\tswap_table##n\n"
    "#define swap_table( c, n )\t\tc.expand_swap_table( n )\n"
    "#define tev_tex_coord( n )\t\tstage_ind##n##_offset( stage##n##_tex_coord_order, textureSize( stage##n##_tex_map_order, 0 ) )\n"
    "#define tev_tex_fetch( n )      texture( stage##n##_tex_map_order, tev_tex_coord( n ) )\n"
    "#define ind_tex_fetch( n )\t\ttexture( ind_stage##n##_tex_map_order, ind_stage##n##_tex_coord_order )\n"
    "\n"
    "#define ind_offset0( tex_coord, tex_size )       ( ( tex_coord ) + ( ind_offset0_ ) / ( tex_size ) )\n"
    "#define ind_offset1( tex_coord, tex_size )       ( ( tex_coord ) + ( ind_offset1_ ) / ( tex_size ) )\n"
    "#define ind_offset2( tex_coord, tex_size )       ( ( tex_coord ) + ( ind_offset2_ ) / ( tex_size ) )\n"
    "#define ind_offset3( tex_coord, tex_size )       ( ( tex_coord ) + ( ind_offset3_ ) / ( tex_size ) )\n"
    "#define ind_offset_null( tex_coord, tex_size )   ( ( tex_coord ) )\n"
    "#define divide_2( stage )                        ( ( stage ) * 0.5 )\n"
    "#define scale_1( stage )                         ( ( stage ) )\n"
    "#define scale_2( stage )                         ( ( stage ) * 2.0 )\n"
    "#define scale_4( stage )                         ( ( stage ) * 4.0 )\n"
    "#define op_add( a, b )                           ( ( a ) + ( b ) )\n"
    "#define op_sub( a, b )                           ( ( a ) - ( b ) )\n"
    "#define bias_zero_rgb( stage )                   ( ( stage ) )\n"
    "#define bias_add_half_rgb( stage )               ( ( stage ) + vec3( 0.5 ) )\n"
    "#define bias_sub_half_rgb( stage )               ( ( stage ) - vec3( 0.5 ) )\n"
    "#define bias_zero_a( stage )                     ( ( stage ) )\n"
    "#define bias_add_half_a( stage )                 ( ( stage ) + 0.5 )\n"
    "#define bias_sub_half_a( stage )                 ( ( stage ) - 0.5 )\n"
    "\n"
    "#define calc_tev_rgb( ca, cb, cc, cd, op, bias, scale ) \\\n"
    "  clamp( scale( bias( op( ( cd ), ( ( one.rgb - ( cc ) ) * ( ca ) + ( cc ) * ( cb ) ) ) ) ), 0.0, 1.0 )\n"
    "\n"
    "#define calc_tev_alpha( aa, ab, ac, ad, op, bias, scale ) \\\n"
    "  clamp( scale( bias( op( ( ad ), ( ( one.a   - ( ac ) ) * ( aa ) + ( ac ) * ( ab ) ) ) ) ), 0.0, 1.0 )\n"
    "\n"
    "#define calc_tev_stage( n )                                              \\\n"
    "{                                                                        \\\n"
    "    vec4 ras = swap_table( stage##n##_ras_order, stage##n##_ras_swap );  \\\n"
    "    vec4 tex = tev_tex_fetch( n );                                       \\\n"
    "    tex = swap_table( tex, stage##n##_tex_map_swap );                    \\\n"
    "                                                                         \\\n"
    "    vec3 konst_color  = stage_color##n##_konst;                          \\\n"
    "    float konst_alpha = stage_alpha##n##_konst;                          \\\n"
    "                                                                         \\\n"
    "    stage_color##n##_out_reg.rgb = calc_tev_rgb( stage_color##n##_a,     \\\n"
    "                                                 stage_color##n##_b,     \\\n"
    "                                                 stage_color##n##_c,     \\\n"
    "                                                 stage_color##n##_d,     \\\n"
    "                                                 stage_color##n##_op,    \\\n"
    "                                                 stage_color##n##_bias,  \\\n"
    "                                                 stage_color##n##_scale  \\\n"
    "                                                 );                      \\\n"
    "                                                                         \\\n"
    "    stage_alpha##n##_out_reg.a = calc_tev_alpha( stage_alpha##n##_a,     \\\n"
    "                                                 stage_alpha##n##_b,     \\\n"
    "                                                 stage_alpha##n##_c,     \\\n"
    "                                                 stage_alpha##n##_d,     \\\n"
    "                                                 stage_alpha##n##_op,    \\\n"
    "                                                 stage_alpha##n##_bias,  \\\n"
    "                                                 stage_alpha##n##_scale  \\\n"
    "                                                 );                      \\\n"
    "}\n"
    "\n"
    "#define calc_ind_stage( n )                                                                                           \\\n"
    "{                                                                                                                     \\\n"
    "    vec4 tex = ind_tex_fetch( n ) - vec4( 0.5 );                                                                      \\\n"
    "    ind_offset##n##_ = ind_texmtx##n[ 0 ].xy * tex.a + ind_texmtx##n[ 0 ].zw * tex.r + ind_texmtx##n[ 1 ].xy * tex.r; \\\n"
    "    ind_offset##n##_ = ( ind_offset##n##_ ) * 255.0;                                                                  \\\n"
    "}                                                                                                    \n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"indirect_stage_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define ind_stage_num\t\t\t   0\n"
    "\n"
    "// attr : \"tex_map_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"ind_tex_map0\", \"ind_tex_map0\" - \"ind_tex_map7\" \n"
    "#define ind_stage0_tex_map_order   tex_map0\n"
    "\n"
    "// attr : \"tex_coord_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"ind_tex_coord0\", \"ind_tex_coord0\" - \"ind_tex_coord7\"\n"
    "#define ind_stage0_tex_coord_order tex_coord0\n"
    "\n"
    "#define ind_stage1_tex_map_order   tex_map1\n"
    "#define ind_stage1_tex_coord_order tex_coord1\n"
    "#define ind_stage2_tex_map_order   tex_map2\n"
    "#define ind_stage2_tex_coord_order tex_coord2\n"
    "#define ind_stage3_tex_map_order   tex_map3\n"
    "#define ind_stage3_tex_coord_order tex_coord3\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"add_indirect_combination_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define ind_combination_num     0\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define tev_stage_num\t\t\t8\n"
    "\n"
    "// attr : \"swap_table0\" - \"swap_table3\"\n"
    "\n"
    "// ex.\"r g b a\" : \"rgba\"\n"
    "// ex.\"r r r b\" : \"rrrb\"\n"
    "#define swap_table0\t\t\t\trgba\n"
    "#define swap_table1\t\t\t\trgba\n"
    "#define swap_table2\t\t\t\trgba\n"
    "#define swap_table3\t\t\t\trgba\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage\"\n"
    "\n"
    "// attr : \"ras_order\"\n"
    "\n"
    "// \"color0a0\"   : \"color0a0\"\n"
    "// \"color1a1\"   : \"color1a1\"\n"
    "// \"color_null\" : \"color_null\"\n"
    "#define stage0_ras_order\t\tcolor0a0\n"
    "\n"
    "// attr : \"tex_map_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"tex_map0\", \"tex_map0\" - \"tex_map7\"\n"
    "#define stage0_tex_map_order\ttex_map0\n"
    "\n"
    "// attr : \"tex_coord_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"tex_coord0\", \"tex_coord0\" - \"tex_coord7\"\n"
    "#define stage0_tex_coord_order\ttex_coord0\n"
    "\n"
    "// attr : \"ras_swap\"\n"
    "\n"
    "// \"0\" - \"3\" : \"0\" - \"3\"\n"
    "#define stage0_ras_swap\t\t\t0\n"
    "\n"
    "// attr : \"tex_map_swap\"\n"
    "\n"
    "// \"0\" - \"3\" : \"0\"-\"3\"\n"
    "#define stage0_tex_map_swap\t\t0\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_color\"\n"
    "\n"
    "// attr : \"a\", \"b\", \"c\", \"d\"\n"
    "\n"
    "// \"rasc\"   : \"ras.rgb\"\n"
    "// \"rasa\"   : \"ras.a\"\n"
    "// \"texc\"   : \"tex.rgb\"\n"
    "// \"texa\"   : \"tex.a\"\n"
    "// \"c0\"     : \"reg0.rgb\"\n"
    "// \"a0\"     : \"reg0.aaa\"\n"
    "// \"c1\"     : \"reg1.rgb\"\n"
    "// \"a1\"     : \"reg1.aaa\"\n"
    "// \"c2\"     : \"reg2.rgb\"\n"
    "// \"a2\"     : \"reg2.aaa\"\n"
    "// \"cprev\"  : \"prev.rgb\"\n"
    "// \"aprev\"  : \"prev.aaa\"\n"
    "// \"konst\"  : \"konst_color.rgb\"\n"
    "// \"zero\"   : \"zero.rgb\"\n"
    "// \"half\"   : \"half_rgb\"\n"
    "// \"one\"    : \"one.rgb\"\n"
    "#define stage_color0_a          zero.rgb\n"
    "#define stage_color0_b          tex.rgb\n"
    "#define stage_color0_c          ras.rgb\n"
    "#define stage_color0_d          zero.rgb\n"
    "\n"
    "// attr   : \"constant\"\n"
    "\n"
    "// \"k0\"   : \"konst0.rgb\"\n"
    "// \"k0_r\" : \"konst0.rrr\"\n"
    "// \"k0_g\" : \"konst0.ggg\"\n"
    "// \"k0_b\" : \"konst0.bbb\"\n"
    "// \"k0_a\" : \"konst0.aaa\"\n"
    "// \"k1\"   : \"konst1.rgb\"\n"
    "// \"k1_r\" : \"konst1.rrr\"\n"
    "// \"k1_g\" : \"konst1.ggg\"\n"
    "// \"k1_b\" : \"konst1.bbb\"\n"
    "// \"k1_a\" : \"konst1.aaa\"\n"
    "// \"k2\"   : \"konst2.rgb\"\n"
    "// \"k2_r\" : \"konst2.rrr\"\n"
    "// \"k2_g\" : \"konst2.ggg\"\n"
    "// \"k2_b\" : \"konst2.bbb\"\n"
    "// \"k2_a\" : \"konst2.aaa\"\n"
    "// \"k3\"   : \"konst3.rgb\"\n"
    "// \"k3_r\" : \"konst3.rrr\"\n"
    "// \"k3_g\" : \"konst3.ggg\"\n"
    "// \"k3_b\" : \"konst3.bbb\"\n"
    "// \"k3_a\" : \"konst3.aaa\"\n"
    "// \"8_8\"  : \"konst_8_8.rgb\"\n"
    "// \"7_8\"  : \"konst_7_8.rgb\"\n"
    "// \"6_8\"  : \"konst_6_8.rgb\"\n"
    "// \"5_8\"  : \"konst_5_8.rgb\"\n"
    "// \"4_8\"  : \"konst_4_8.rgb\"\n"
    "// \"3_8\"  : \"konst_3_8.rgb\"\n"
    "// \"2_8\"  : \"konst_2_8.rgb\"\n"
    "// \"1_8\"  : \"konst_1_8.rgb\"\n"
    "#define stage_color0_konst\t\tkonst_8_8.rgb\n"
    "\n"
    "// attr : \"op\"\n"
    "\n"
    "// \"add\" : \"op_add\"\n"
    "// \"sub\" : \"op_sub\"\n"
    "#define stage_color0_op         op_add\n"
    "\n"
    "// attr : \"bias\"\n"
    "\n"
    "// \"zero\"     : \"bias_zero_rgb\"\n"
    "// \"sub_half\" : \"bias_sub_half_rgb\"\n"
    "// \"add_half\" : \"bias_add_half_rgb\"\n"
    "#define stage_color0_bias       bias_zero_rgb\n"
    "\n"
    "// attr : \"scale\"\n"
    "\n"
    "// \"divide_2\" : \"divide_2\n"
    "// \"scale_1\"  : \"scale_1\n"
    "// \"scale_2\"  : \"scale_2\n"
    "// \"scale_4\"  : \"scale_4\n"
    "#define stage_color0_scale      scale_1\n"
    "\n"
    "// attr : \"out_reg\"\n"
    "\n"
    "// \"reg0\" : \"reg0\"\n"
    "// \"reg1\" : \"reg1\"\n"
    "// \"reg2\" : \"reg2\"\n"
    "// \"prev\" : \"prev\"\n"
    "#define stage_color0_out_reg    prev\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_alpha\"\n"
    "\n"
    "// attr : \"a\", \"b\", \"c\", \"d\"\n"
    "\n"
    "// \"rasa\"   : \"ras.a\"\n"
    "// \"texa\"   : \"tex.a\"\n"
    "// \"a0\"     : \"reg0.a\"\n"
    "// \"a1\"     : \"reg1.a\"\n"
    "// \"a2\"     : \"reg2.a\"\n"
    "// \"aprev\"  : \"prev.a\"\n"
    "// \"konst\"  : \"konst_alpha\"\n"
    "// \"zero\"   : \"zero.a\"\n"
    "#define stage_alpha0_a          zero.a\n"
    "#define stage_alpha0_b          tex.a\n"
    "#define stage_alpha0_c          ras.a\n"
    "#define stage_alpha0_d          zero.a\n"
    "#define stage_alpha0_op         op_add\n"
    "\n"
    "// attr   : \"constant\"\n"
    "\n"
    "// \"k0_r\" : \"konst0.r\"\n"
    "// \"k0_g\" : \"konst0.g\"\n"
    "// \"k0_b\" : \"konst0.b\"\n"
    "// \"k0_a\" : \"konst0.a\"\n"
    "// \"k1_r\" : \"konst1.r\"\n"
    "// \"k1_g\" : \"konst1.g\"\n"
    "// \"k1_b\" : \"konst1.b\"\n"
    "// \"k1_a\" : \"konst1.a\"\n"
    "// \"k2_r\" : \"konst2.r\"\n"
    "// \"k2_g\" : \"konst2.g\"\n"
    "// \"k2_b\" : \"konst2.b\"\n"
    "// \"k2_a\" : \"konst2.a\"\n"
    "// \"k3_r\" : \"konst3.r\"\n"
    "// \"k3_g\" : \"konst3.g\"\n"
    "// \"k3_b\" : \"konst3.b\"\n"
    "// \"k3_a\" : \"konst3.a\"\n"
    "// \"8_8\"  : \"konst_8_8.a\"\n"
    "// \"7_8\"  : \"konst_7_8.a\"\n"
    "// \"6_8\"  : \"konst_6_8.a\"\n"
    "// \"5_8\"  : \"konst_5_8.a\"\n"
    "// \"4_8\"  : \"konst_4_8.a\"\n"
    "// \"3_8\"  : \"konst_3_8.a\"\n"
    "// \"2_8\"  : \"konst_2_8.a\"\n"
    "// \"1_8\"  : \"konst_1_8.a\"\n"
    "#define stage_alpha0_konst\t\tkonst_8_8.a\n"
    "\n"
    "#define stage_alpha0_bias       bias_zero_a\n"
    "#define stage_alpha0_scale      scale_1\n"
    "#define stage_alpha0_out_reg    prev\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage_ind0_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage1_tex_map_order\tstage0_tex_map_order\n"
    "#define stage1_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage1_ras_order\t\tstage0_ras_order\n"
    "#define stage1_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage1_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color1_a          stage_color0_a\n"
    "#define stage_color1_b          stage_color0_b\n"
    "#define stage_color1_c          stage_color0_c\n"
    "#define stage_color1_d          stage_color0_d\n"
    "#define stage_color1_konst\t\tstage_color0_konst\n"
    "#define stage_color1_op         stage_color0_op\n"
    "#define stage_color1_bias       stage_color0_bias\n"
    "#define stage_color1_scale      stage_color0_scale\n"
    "#define stage_color1_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha1_a          stage_alpha0_a\n"
    "#define stage_alpha1_b          stage_alpha0_b\n"
    "#define stage_alpha1_c          stage_alpha0_c\n"
    "#define stage_alpha1_d          stage_alpha0_d\n"
    "#define stage_alpha1_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha1_op         stage_alpha0_op\n"
    "#define stage_alpha1_bias       stage_alpha0_bias\n"
    "#define stage_alpha1_scale      stage_alpha0_scale\n"
    "#define stage_alpha1_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind1_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage2_tex_map_order\tstage0_tex_map_order\n"
    "#define stage2_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage2_ras_order\t\tstage0_ras_order\n"
    "#define stage2_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage2_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color2_a          stage_color0_a\n"
    "#define stage_color2_b          stage_color0_b\n"
    "#define stage_color2_c          stage_color0_c\n"
    "#define stage_color2_d          stage_color0_d\n"
    "#define stage_color2_konst\t\tstage_color0_konst\n"
    "#define stage_color2_op         stage_color0_op\n"
    "#define stage_color2_bias       stage_color0_bias\n"
    "#define stage_color2_scale      stage_color0_scale\n"
    "#define stage_color2_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha2_a          stage_alpha0_a\n"
    "#define stage_alpha2_b          stage_alpha0_b\n"
    "#define stage_alpha2_c          stage_alpha0_c\n"
    "#define stage_alpha2_d          stage_alpha0_d\n"
    "#define stage_alpha2_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha2_op         stage_alpha0_op\n"
    "#define stage_alpha2_bias       stage_alpha0_bias\n"
    "#define stage_alpha2_scale      stage_alpha0_scale\n"
    "#define stage_alpha2_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind2_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage3_tex_map_order\tstage0_tex_map_order\n"
    "#define stage3_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage3_ras_order\t\tstage0_ras_order\n"
    "#define stage3_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage3_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color3_a          stage_color0_a\n"
    "#define stage_color3_b          stage_color0_b\n"
    "#define stage_color3_c          stage_color0_c\n"
    "#define stage_color3_d          stage_color0_d\n"
    "#define stage_color3_konst\t\tstage_color0_konst\n"
    "#define stage_color3_op         stage_color0_op\n"
    "#define stage_color3_bias       stage_color0_bias\n"
    "#define stage_color3_scale      stage_color0_scale\n"
    "#define stage_color3_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha3_a          stage_alpha0_a\n"
    "#define stage_alpha3_b          stage_alpha0_b\n"
    "#define stage_alpha3_c          stage_alpha0_c\n"
    "#define stage_alpha3_d          stage_alpha0_d\n"
    "#define stage_alpha3_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha3_op         stage_alpha0_op\n"
    "#define stage_alpha3_bias       stage_alpha0_bias\n"
    "#define stage_alpha3_scale      stage_alpha0_scale\n"
    "#define stage_alpha3_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind3_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage4_tex_map_order\tstage0_tex_map_order\n"
    "#define stage4_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage4_ras_order\t\tstage0_ras_order\n"
    "#define stage4_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage4_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color4_a          stage_color0_a\n"
    "#define stage_color4_b          stage_color0_b\n"
    "#define stage_color4_c          stage_color0_c\n"
    "#define stage_color4_d          stage_color0_d\n"
    "#define stage_color4_konst\t\tstage_color0_konst\n"
    "#define stage_color4_op         stage_color0_op\n"
    "#define stage_color4_bias       stage_color0_bias\n"
    "#define stage_color4_scale      stage_color0_scale\n"
    "#define stage_color4_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha4_a          stage_alpha0_a\n"
    "#define stage_alpha4_b          stage_alpha0_b\n"
    "#define stage_alpha4_c          stage_alpha0_c\n"
    "#define stage_alpha4_d          stage_alpha0_d\n"
    "#define stage_alpha4_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha4_op         stage_alpha0_op\n"
    "#define stage_alpha4_bias       stage_alpha0_bias\n"
    "#define stage_alpha4_scale      stage_alpha0_scale\n"
    "#define stage_alpha4_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind4_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage5_tex_map_order\tstage0_tex_map_order\n"
    "#define stage5_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage5_ras_order\t\tstage0_ras_order\n"
    "#define stage5_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage5_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color5_a          stage_color0_a\n"
    "#define stage_color5_b          stage_color0_b\n"
    "#define stage_color5_c          stage_color0_c\n"
    "#define stage_color5_d          stage_color0_d\n"
    "#define stage_color5_konst\t\tstage_color0_konst\n"
    "#define stage_color5_op         stage_color0_op\n"
    "#define stage_color5_bias       stage_color0_bias\n"
    "#define stage_color5_scale      stage_color0_scale\n"
    "#define stage_color5_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha5_a          stage_alpha0_a\n"
    "#define stage_alpha5_b          stage_alpha0_b\n"
    "#define stage_alpha5_c          stage_alpha0_c\n"
    "#define stage_alpha5_d          stage_alpha0_d\n"
    "#define stage_alpha5_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha5_op         stage_alpha0_op\n"
    "#define stage_alpha5_bias       stage_alpha0_bias\n"
    "#define stage_alpha5_scale      stage_alpha0_scale\n"
    "#define stage_alpha5_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind5_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage6_tex_map_order\tstage0_tex_map_order\n"
    "#define stage6_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage6_ras_order\t\tstage0_ras_order\n"
    "#define stage6_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage6_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color6_a          stage_color0_a\n"
    "#define stage_color6_b          stage_color0_b\n"
    "#define stage_color6_c          stage_color0_c\n"
    "#define stage_color6_d          stage_color0_d\n"
    "#define stage_color6_konst\t\tstage_color0_konst\n"
    "#define stage_color6_op         stage_color0_op\n"
    "#define stage_color6_bias       stage_color0_bias\n"
    "#define stage_color6_scale      stage_color0_scale\n"
    "#define stage_color6_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha6_a          stage_alpha0_a\n"
    "#define stage_alpha6_b          stage_alpha0_b\n"
    "#define stage_alpha6_c          stage_alpha0_c\n"
    "#define stage_alpha6_d          stage_alpha0_d\n"
    "#define stage_alpha6_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha6_op         stage_alpha0_op\n"
    "#define stage_alpha6_bias       stage_alpha0_bias\n"
    "#define stage_alpha6_scale      stage_alpha0_scale\n"
    "#define stage_alpha6_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind6_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage7_tex_map_order\tstage0_tex_map_order\n"
    "#define stage7_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage7_ras_order\t\tstage0_ras_order\n"
    "#define stage7_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage7_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color7_a          stage_color0_a\n"
    "#define stage_color7_b          stage_color0_b\n"
    "#define stage_color7_c          stage_color0_c\n"
    "#define stage_color7_d          stage_color0_d\n"
    "#define stage_color7_konst\t\tstage_color0_konst\n"
    "#define stage_color7_op         stage_color0_op\n"
    "#define stage_color7_bias       stage_color0_bias\n"
    "#define stage_color7_scale      stage_color0_scale\n"
    "#define stage_color7_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha7_a          stage_alpha0_a\n"
    "#define stage_alpha7_b          stage_alpha0_b\n"
    "#define stage_alpha7_c          stage_alpha0_c\n"
    "#define stage_alpha7_d          stage_alpha0_d\n"
    "#define stage_alpha7_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha7_op         stage_alpha0_op\n"
    "#define stage_alpha7_bias       stage_alpha0_bias\n"
    "#define stage_alpha7_scale      stage_alpha0_scale\n"
    "#define stage_alpha7_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind7_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// マテリアル\n"
    "//------------------------------------------------------------------------------\n"
    "layout(std140) uniform Mat\n"
    "{\n"
    "    vec4        mat_color0;       // @@ id=\"mat_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        mat_color1;       // @@ id=\"mat_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        amb_color0;       // @@ id=\"amb_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        amb_color1;       // @@ id=\"amb_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color0;       // @@ id=\"tev_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color1;       // @@ id=\"tev_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color2;       // @@ id=\"tev_color2\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst0;           // @@ id=\"konst0\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst1;           // @@ id=\"konst1\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst2;           // @@ id=\"konst2\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst3;           // @@ id=\"konst3\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4\t\tind_texmtx0[ 2 ]; // @@ id=\"ind_texmtx0\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\tind_texmtx1[ 2 ]; // @@ id=\"ind_texmtx1\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\tind_texmtx2[ 2 ]; // @@ id=\"ind_texmtx2\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\ttexmtx0[ 3 ];     // @@ id=\"texmtx0\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo0\"\n"
    "    vec4\t\ttexmtx1[ 3 ];     // @@ id=\"texmtx1\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo1\"\n"
    "    vec4\t\ttexmtx2[ 3 ];     // @@ id=\"texmtx2\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo2\"\n"
    "    vec4\t\ttexmtx3[ 3 ];     // @@ id=\"texmtx3\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo3\"\n"
    "    vec4\t\ttexmtx4[ 3 ];     // @@ id=\"texmtx4\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo4\"\n"
    "    vec4\t\ttexmtx5[ 3 ];     // @@ id=\"texmtx5\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo5\"\n"
    "    vec4\t\ttexmtx6[ 3 ];     // @@ id=\"texmtx6\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo6\"\n"
    "    vec4\t\ttexmtx7[ 3 ];     // @@ id=\"texmtx7\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo7\"\n"
    "};\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// (Custom for Windows port) Alpha test & Item ID\n"
    "//------------------------------------------------------------------------------\n"
    "struct PS_PUSH_DATA\n"
    "{\n"
    "    uint alphaFunc;\n"
    "    float alphaRef;\n"
    "    uint uItemID; int uIsSelected;\n"
    "};\n"
    "\n"
    "uniform PS_PUSH_DATA PS_PUSH;\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// (Custom for Windows port) Fragment Outputs\n"
    "//------------------------------------------------------------------------------\n"
    "layout (location = 0) out vec4 FragData_0;\n"
    "layout (location = 1) out vec4 FragData_1;\n"
    "layout (location = 2) out uint ItemID;\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// テクスチャ\n"
    "//------------------------------------------------------------------------------\n"
    "uniform sampler2D tex_map0; // @@ id=\"_a0\" hint=\"albedo0\"\n"
    "uniform sampler2D tex_map1; // @@ id=\"_a1\" hint=\"albedo1\"\n"
    "uniform sampler2D tex_map2; // @@ id=\"_a2\" hint=\"albedo2\"\n"
    "uniform sampler2D tex_map3; // @@ id=\"_a3\" hint=\"albedo3\"\n"
    "uniform sampler2D tex_map4; // @@ id=\"_a4\" hint=\"albedo4\"\n"
    "uniform sampler2D tex_map5; // @@ id=\"_a5\" hint=\"albedo5\"\n"
    "uniform sampler2D tex_map6; // @@ id=\"_a6\" hint=\"albedo6\"\n"
    "uniform sampler2D tex_map7; // @@ id=\"_a7\" hint=\"albedo7\"\n"
    "\n"
    "in      vec2   tex_coord0;\n"
    "in      vec2   tex_coord1;\n"
    "in      vec2   tex_coord2;\n"
    "in      vec2   tex_coord3;\n"
    "in      vec2   tex_coord4;\n"
    "in      vec2   tex_coord5;\n"
    "in      vec2   tex_coord6;\n"
    "in      vec2   tex_coord7;\n"
    "in      vec4   color0a0;\n"
    "in      vec4   color1a1;\n"
    "in      vec4   fog_color;\n"
    "// red-pro2\r\n"
    "in      vec3   normal;\n"
    "\n"
    "#define one    const_one\n"
    "#define zero   const_zero\n"
    "#define half   const_half\n"
    "\n"
    "// for swizzle accsess\n"
    "const vec4 const_zero = vec4( 0.0 );\n"
    "const vec4 const_half = vec4( 0.5 );\n"
    "const vec4 const_one  = vec4( 1.0 );\n"
    "const vec4 konst_8_8  = konst_color8( 8.0 );\n"
    "const vec4 konst_7_8  = konst_color8( 7.0 );\n"
    "const vec4 konst_6_8  = konst_color8( 6.0 );\n"
    "const vec4 konst_5_8  = konst_color8( 5.0 );\n"
    "const vec4 konst_4_8  = konst_color8( 4.0 );\n"
    "const vec4 konst_3_8  = konst_color8( 3.0 );\n"
    "const vec4 konst_2_8  = konst_color8( 2.0 );\n"
    "const vec4 konst_1_8  = konst_color8( 1.0 );\n"
    "const vec4 color_null = const_one;\n"
    "\n"
    "void main( void )\n"
    "{\n"
    "#if ( tev_stage_num < 0 || TEV_STAGE_MAX < tev_stage_num )\n"
    "#   error\n"
    "#endif\n"
    "\n"
    "#if ( ind_stage_num < 0 || IND_STAGE_MAX < ind_stage_num )\n"
    "#   error\n"
    "#endif\n"
    "\n"
    "    vec2 ind_offset0_ = vec2( 0.0 );\n"
    "    vec2 ind_offset1_ = vec2( 0.0 );\n"
    "    vec2 ind_offset2_ = vec2( 0.0 );\n"
    "    vec2 ind_offset3_ = vec2( 0.0 );\n"
    "\n"
    "    // indirect\n"
    "#if ( 0 < ind_stage_num )\n"
    "    calc_ind_stage( 0 );\n"
    "#endif\n"
    "\n"
    "#if ( 1 < ind_stage_num )\n"
    "    calc_ind_stage( 1 );\n"
    "#endif\n"
    "\n"
    "#if ( 2 < ind_stage_num )\n"
    "    calc_ind_stage( 2 );\n"
    "#endif\n"
    "\n"
    "#if ( 3 < ind_stage_num )\n"
    "    calc_ind_stage( 3 );\n"
    "#endif\n"
    "\n"
    "    // tev stage\n"
    "    vec4 reg0 = tev_color0;\n"
    "    vec4 reg1 = tev_color1;\n"
    "    vec4 reg2 = tev_color2;\n"
    "    vec4 prev = one;\n"
    "\n"
    "#if ( 0 < tev_stage_num )\n"
    "    calc_tev_stage( 0 );\n"
    "#endif\n"
    "\n"
    "#if ( 1 < tev_stage_num )\n"
    "    calc_tev_stage( 1 );\n"
    "#endif\n"
    "\n"
    "#if ( 2 < tev_stage_num )\n"
    "    calc_tev_stage( 2 );\n"
    "#endif\n"
    "\n"
    "#if ( 3 < tev_stage_num )\n"
    "    calc_tev_stage( 3 );\n"
    "#endif\n"
    "\n"
    "#if ( 4 < tev_stage_num )\n"
    "    calc_tev_stage( 4 );\n"
    "#endif\n"
    "\n"
    "#if ( 5 < tev_stage_num )\n"
    "    calc_tev_stage( 5 );\n"
    "#endif\n"
    "\n"
    "#if ( 6 < tev_stage_num )\n"
    "    calc_tev_stage( 6 );\n"
    "#endif\n"
    "\n"
    "#if ( 7 < tev_stage_num )\n"
    "    calc_tev_stage( 7 );\n"
    "#endif\n"
    "\n"
    "    switch (PS_PUSH.alphaFunc & 255u)\n"
    "    {\n"
    "        case 0u:\n"
    "        {\n"
    "            discard;\n"
    "        }\n"
    "        case 1u:\n"
    "        {\n"
    "            if (!(prev.a < PS_PUSH.alphaRef))\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 2u:\n"
    "        {\n"
    "            if (abs(prev.a - PS_PUSH.alphaRef) > 9.9999997473787516355514526367188e-05)\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 3u:\n"
    "        {\n"
    "            if (!(prev.a <= PS_PUSH.alphaRef))\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 4u:\n"
    "        {\n"
    "            if (!(prev.a > PS_PUSH.alphaRef))\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 5u:\n"
    "        {\n"
    "            if (abs(prev.a - PS_PUSH.alphaRef) <= 9.9999997473787516355514526367188e-05)\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 6u:\n"
    "        {\n"
    "            if (!(prev.a >= PS_PUSH.alphaRef))\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "    }\n"
    "    \n"
    "    vec4 FragColor = vec4(mix(prev.rgb, fog_color.rgb, fog_color.a), prev.a);\n"
    "    \n"
    "    if (PS_PUSH.uIsSelected != 0)\n"
    "        FragData_0 = vec4(FragColor.rgb * 0.5f + vec3(1.0f, 0.25f, 0.25f) * 0.5f, 1.0f);\n"
    "    else\n"
    "        FragData_0 = FragColor;\n"
    "    \n"
    "    ItemID         = PS_PUSH.uItemID;\n"
    "    \n"
    "    FragData_1.rgb = normalize( normal ) * 0.5 + 0.5;\n"
    "    FragData_1.a   = 1.0;   \n"
    "}\n"
    "\n"
    "\n"
    "\x00",

    // (NSMBU) wii_pipeline_fs.sh (old)
    "//------------------------------------------------------------------------------\n"
    "/** @file   wii_pipleline_fs.sh\n"
    " *  @brief  wiiのパイプラインエミュレータ（フラグメント）\n"
    " *  @author Takuhiro Dohta\n"
    " */\n"
    "//------------------------------------------------------------------------------\n"
    "#version 150\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// ハード仕様\n"
    "//------------------------------------------------------------------------------\n"
    "#define TEV_STAGE_MAX   \t( 8 )\n"
    "#define IND_STAGE_MAX   \t( 4 )\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// マクロ定義\n"
    "//------------------------------------------------------------------------------\n"
    "#define konst_color8( x )\t\t\tvec4( x / 8.0 )\n"
    "#define expand_swap_table( n )\t\tswap_table##n\n"
    "#define swap_table( c, n )\t\t\tc.expand_swap_table( n )\n"
    "#define tev_tex_fetch( n )\t\t\ttexture( stage##n##_tex_map_order, stage##n##_tex_coord_order + tex_offset )\n"
    "#define ind_tex_fetch( n )\t\t\ttexture( ind_stage##n##_tex_map_order, ind_stage##n##_tex_coord_order )\n"
    "\n"
    "#define calc_tev_rgb( ca, cb, cc, cd, op, bias, scale )  \tclamp( ( ( cd ) + ( op ) * ( ( one.rgb - ( cc ) ) * ( ca ) + ( cc ) * ( cb ) ) + ( bias.rgb ) ) * ( scale ), 0.0, 1.0 )\n"
    "#define calc_tev_alpha( aa, ab, ac, ad, op, bias, scale )\tclamp( ( ( ad ) + ( op ) * ( ( one.a   - ( ac ) ) * ( aa ) + ( ac ) * ( ab ) ) + ( bias.a   ) ) * ( scale ), 0.0, 1.0 )\n"
    "\n"
    "#define calc_tev_stage( n )                                                                 \\\n"
    "{                                                                                           \\\n"
    "    vec2 tex_offset   = stage_ind##n##_offset / textureSize( stage##n##_tex_map_order, 0 ); \\\n"
    "    vec4 ras          = swap_table( stage##n##_ras_order, stage##n##_ras_swap );            \\\n"
    "    vec4 tex          = swap_table( tev_tex_fetch( n ), stage##n##_tex_map_swap );          \\\n"
    "    vec3 konst_color  = stage_color##n##_konst;                                             \\\n"
    "    float konst_alpha = stage_alpha##n##_konst;                                             \\\n"
    "                                                                                            \\\n"
    "    stage_color##n##_out_reg.rgb = calc_tev_rgb( stage_color##n##_a,                        \\\n"
    "                                                 stage_color##n##_b,                        \\\n"
    "                                                 stage_color##n##_c,                        \\\n"
    "                                                 stage_color##n##_d,                        \\\n"
    "                                                 stage_color##n##_op,                       \\\n"
    "                                                 stage_color##n##_bias,                     \\\n"
    "                                                 stage_color##n##_scale                     \\\n"
    "                                                 );                                         \\\n"
    "                                                                                            \\\n"
    "    stage_alpha##n##_out_reg.a = calc_tev_alpha( stage_alpha##n##_a,                        \\\n"
    "                                                 stage_alpha##n##_b,                        \\\n"
    "                                                 stage_alpha##n##_c,                        \\\n"
    "                                                 stage_alpha##n##_d,                        \\\n"
    "                                                 stage_alpha##n##_op,                       \\\n"
    "                                                 stage_alpha##n##_bias,                     \\\n"
    "                                                 stage_alpha##n##_scale                     \\\n"
    "                                                 );                                         \\\n"
    "}                                                                         \n"
    "\n"
    "#define calc_ind_stage( n )                                                                                        \\\n"
    "{                                                                                                            \t   \\\n"
    "    vec4 tex = ind_tex_fetch( n ) - vec4( 0.5 );                                                                   \\\n"
    "    ind_offset##n = ind_texmtx##n[ 0 ].xy * tex.a + ind_texmtx##n[ 0 ].zw * tex.r + ind_texmtx##n[ 1 ].xy * tex.r; \\\n"
    "    ind_offset##n = ( ind_offset##n ) * 255.0;                                                                     \\\n"
    "}                                                                                                    \n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"indirect_stage_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define ind_stage_num\t\t\t   0\n"
    "\n"
    "// attr : \"tex_map_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"ind_tex_map0\", \"ind_tex_map0\" - \"ind_tex_map7\" \n"
    "#define ind_stage0_tex_map_order   tex_map0\n"
    "\n"
    "// attr : \"tex_coord_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"ind_tex_coord0\", \"ind_tex_coord0\" - \"ind_tex_coord7\"\n"
    "#define ind_stage0_tex_coord_order tex_coord0\n"
    "\n"
    "#define ind_stage1_tex_map_order   tex_map1\n"
    "#define ind_stage1_tex_coord_order tex_coord1\n"
    "#define ind_stage2_tex_map_order   tex_map2\n"
    "#define ind_stage2_tex_coord_order tex_coord2\n"
    "#define ind_stage3_tex_map_order   tex_map3\n"
    "#define ind_stage3_tex_coord_order tex_coord3\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"add_indirect_combination_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define ind_combination_num     0\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_array\"\n"
    "\n"
    "// attr : \"size\"\n"
    "\n"
    "// \"0\"-\"15\" : \"0\" - \"15\"\n"
    "#define tev_stage_num\t\t\t8\n"
    "\n"
    "// attr : \"swap_table0\" - \"swap_table3\"\n"
    "\n"
    "// ex.\"r g b a\" : \"rgba\"\n"
    "// ex.\"r r r b\" : \"rrrb\"\n"
    "#define swap_table0\t\t\t\trgba\n"
    "#define swap_table1\t\t\t\trgba\n"
    "#define swap_table2\t\t\t\trgba\n"
    "#define swap_table3\t\t\t\trgba\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage\"\n"
    "\n"
    "// attr : \"ras_order\"\n"
    "\n"
    "// \"color0a0\"   : \"color0a0\"\n"
    "// \"color1a1\"   : \"color1a1\"\n"
    "// \"color_null\" : \"color_null\"\n"
    "#define stage0_ras_order\t\tcolor0a0\n"
    "\n"
    "// attr : \"tex_map_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"tex_map0\", \"tex_map0\" - \"tex_map7\"\n"
    "#define stage0_tex_map_order\ttex_map0\n"
    "\n"
    "// attr : \"tex_coord_order\"\n"
    "\n"
    "// \"-1\", \"0\" - \"7\"  : \"tex_coord0\", \"tex_coord0\" - \"tex_coord7\"\n"
    "#define stage0_tex_coord_order\ttex_coord0\n"
    "\n"
    "// attr : \"ras_swap\"\n"
    "\n"
    "// \"0\" - \"3\" : \"0\" - \"3\"\n"
    "#define stage0_ras_swap\t\t\t0\n"
    "\n"
    "// attr : \"tex_map_swap\"\n"
    "\n"
    "// \"0\" - \"3\" : \"0\"-\"3\"\n"
    "#define stage0_tex_map_swap\t\t0\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_color\"\n"
    "\n"
    "// attr : \"a\", \"b\", \"c\", \"d\"\n"
    "\n"
    "// \"rasc\"   : \"ras.rgb\"\n"
    "// \"rasa\"   : \"ras.a\"\n"
    "// \"texc\"   : \"tex.rgb\"\n"
    "// \"texa\"   : \"tex.a\"\n"
    "// \"c0\"     : \"reg0.rgb\"\n"
    "// \"a0\"     : \"reg0.aaa\"\n"
    "// \"c1\"     : \"reg1.rgb\"\n"
    "// \"a1\"     : \"reg1.aaa\"\n"
    "// \"c2\"     : \"reg2.rgb\"\n"
    "// \"a2\"     : \"reg2.aaa\"\n"
    "// \"cprev\"  : \"prev.rgb\"\n"
    "// \"aprev\"  : \"prev.aaa\"\n"
    "// \"konst\"  : \"konst_color.rgb\"\n"
    "// \"zero\"   : \"zero.rgb\"\n"
    "// \"half\"   : \"half_rgb\"\n"
    "// \"one\"    : \"one.rgb\"\n"
    "#define stage_color0_a          zero.rgb\n"
    "#define stage_color0_b          tex.rgb\n"
    "#define stage_color0_c          ras.rgb\n"
    "#define stage_color0_d          zero.rgb\n"
    "\n"
    "// attr   : \"constant\"\n"
    "\n"
    "// \"k0\"   : \"konst0.rgb\"\n"
    "// \"k0_r\" : \"konst0.rrr\"\n"
    "// \"k0_g\" : \"konst0.ggg\"\n"
    "// \"k0_b\" : \"konst0.bbb\"\n"
    "// \"k0_a\" : \"konst0.aaa\"\n"
    "// \"k1\"   : \"konst1.rgb\"\n"
    "// \"k1_r\" : \"konst1.rrr\"\n"
    "// \"k1_g\" : \"konst1.ggg\"\n"
    "// \"k1_b\" : \"konst1.bbb\"\n"
    "// \"k1_a\" : \"konst1.aaa\"\n"
    "// \"k2\"   : \"konst2.rgb\"\n"
    "// \"k2_r\" : \"konst2.rrr\"\n"
    "// \"k2_g\" : \"konst2.ggg\"\n"
    "// \"k2_b\" : \"konst2.bbb\"\n"
    "// \"k2_a\" : \"konst2.aaa\"\n"
    "// \"k3\"   : \"konst3.rgb\"\n"
    "// \"k3_r\" : \"konst3.rrr\"\n"
    "// \"k3_g\" : \"konst3.ggg\"\n"
    "// \"k3_b\" : \"konst3.bbb\"\n"
    "// \"k3_a\" : \"konst3.aaa\"\n"
    "// \"8_8\"  : \"konst_8_8.rgb\"\n"
    "// \"7_8\"  : \"konst_7_8.rgb\"\n"
    "// \"6_8\"  : \"konst_6_8.rgb\"\n"
    "// \"5_8\"  : \"konst_5_8.rgb\"\n"
    "// \"4_8\"  : \"konst_4_8.rgb\"\n"
    "// \"3_8\"  : \"konst_3_8.rgb\"\n"
    "// \"2_8\"  : \"konst_2_8.rgb\"\n"
    "// \"1_8\"  : \"konst_1_8.rgb\"\n"
    "#define stage_color0_konst\t\tkonst_8_8.rgb\n"
    "\n"
    "// attr : \"op\"\n"
    "\n"
    "// \"add\" : \"op_add\"\n"
    "// \"sub\" : \"op_sub\"\n"
    "#define stage_color0_op         op_add\n"
    "\n"
    "// attr : \"bias\"\n"
    "\n"
    "// \"zero\"     : \"zero\"\n"
    "// \"sub_half\" : \"sub_half\"\n"
    "// \"add_half\" : \"add_half\"\n"
    "#define stage_color0_bias       zero\n"
    "\n"
    "// attr : \"scale\"\n"
    "\n"
    "// \"divide_2\" : \"divide_2\n"
    "// \"scale_1\"  : \"scale_1\n"
    "// \"scale_2\"  : \"scale_2\n"
    "// \"scale_4\"  : \"scale_4\n"
    "#define stage_color0_scale      scale_1\n"
    "\n"
    "// attr : \"out_reg\"\n"
    "\n"
    "// \"reg0\" : \"reg0\"\n"
    "// \"reg1\" : \"reg1\"\n"
    "// \"reg2\" : \"reg2\"\n"
    "// \"prev\" : \"prev\"\n"
    "#define stage_color0_out_reg    prev\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// tag  : \"tev_stage_alpha\"\n"
    "\n"
    "// attr : \"a\", \"b\", \"c\", \"d\"\n"
    "\n"
    "// \"rasa\"   : \"ras.a\"\n"
    "// \"texa\"   : \"tex.a\"\n"
    "// \"a0\"     : \"reg0.a\"\n"
    "// \"a1\"     : \"reg1.a\"\n"
    "// \"a2\"     : \"reg2.a\"\n"
    "// \"aprev\"  : \"prev.a\"\n"
    "// \"konst\"  : \"konst_alpha\"\n"
    "// \"zero\"   : \"zero.a\"\n"
    "#define stage_alpha0_a          zero.a\n"
    "#define stage_alpha0_b          tex.a\n"
    "#define stage_alpha0_c          ras.a\n"
    "#define stage_alpha0_d          zero.a\n"
    "#define stage_alpha0_op         op_add\n"
    "\n"
    "// attr   : \"constant\"\n"
    "\n"
    "// \"k0_r\" : \"konst0.r\"\n"
    "// \"k0_g\" : \"konst0.g\"\n"
    "// \"k0_b\" : \"konst0.b\"\n"
    "// \"k0_a\" : \"konst0.a\"\n"
    "// \"k1_r\" : \"konst1.r\"\n"
    "// \"k1_g\" : \"konst1.g\"\n"
    "// \"k1_b\" : \"konst1.b\"\n"
    "// \"k1_a\" : \"konst1.a\"\n"
    "// \"k2_r\" : \"konst2.r\"\n"
    "// \"k2_g\" : \"konst2.g\"\n"
    "// \"k2_b\" : \"konst2.b\"\n"
    "// \"k2_a\" : \"konst2.a\"\n"
    "// \"k3_r\" : \"konst3.r\"\n"
    "// \"k3_g\" : \"konst3.g\"\n"
    "// \"k3_b\" : \"konst3.b\"\n"
    "// \"k3_a\" : \"konst3.a\"\n"
    "// \"8_8\"  : \"konst_8_8.a\"\n"
    "// \"7_8\"  : \"konst_7_8.a\"\n"
    "// \"6_8\"  : \"konst_6_8.a\"\n"
    "// \"5_8\"  : \"konst_5_8.a\"\n"
    "// \"4_8\"  : \"konst_4_8.a\"\n"
    "// \"3_8\"  : \"konst_3_8.a\"\n"
    "// \"2_8\"  : \"konst_2_8.a\"\n"
    "// \"1_8\"  : \"konst_1_8.a\"\n"
    "#define stage_alpha0_konst\t\tkonst_8_8.a\n"
    "\n"
    "#define stage_alpha0_bias       zero\n"
    "#define stage_alpha0_scale      scale_1\n"
    "#define stage_alpha0_out_reg    prev\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage_ind0_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage1_tex_map_order\tstage0_tex_map_order\n"
    "#define stage1_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage1_ras_order\t\tstage0_ras_order\n"
    "#define stage1_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage1_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color1_a          stage_color0_a\n"
    "#define stage_color1_b          stage_color0_b\n"
    "#define stage_color1_c          stage_color0_c\n"
    "#define stage_color1_d          stage_color0_d\n"
    "#define stage_color1_konst\t\tstage_color0_konst\n"
    "#define stage_color1_op         stage_color0_op\n"
    "#define stage_color1_bias       stage_color0_bias\n"
    "#define stage_color1_scale      stage_color0_scale\n"
    "#define stage_color1_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha1_a          stage_alpha0_a\n"
    "#define stage_alpha1_b          stage_alpha0_b\n"
    "#define stage_alpha1_c          stage_alpha0_c\n"
    "#define stage_alpha1_d          stage_alpha0_d\n"
    "#define stage_alpha1_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha1_op         stage_alpha0_op\n"
    "#define stage_alpha1_bias       stage_alpha0_bias\n"
    "#define stage_alpha1_scale      stage_alpha0_scale\n"
    "#define stage_alpha1_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind1_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage2_tex_map_order\tstage0_tex_map_order\n"
    "#define stage2_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage2_ras_order\t\tstage0_ras_order\n"
    "#define stage2_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage2_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color2_a          stage_color0_a\n"
    "#define stage_color2_b          stage_color0_b\n"
    "#define stage_color2_c          stage_color0_c\n"
    "#define stage_color2_d          stage_color0_d\n"
    "#define stage_color2_konst\t\tstage_color0_konst\n"
    "#define stage_color2_op         stage_color0_op\n"
    "#define stage_color2_bias       stage_color0_bias\n"
    "#define stage_color2_scale      stage_color0_scale\n"
    "#define stage_color2_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha2_a          stage_alpha0_a\n"
    "#define stage_alpha2_b          stage_alpha0_b\n"
    "#define stage_alpha2_c          stage_alpha0_c\n"
    "#define stage_alpha2_d          stage_alpha0_d\n"
    "#define stage_alpha2_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha2_op         stage_alpha0_op\n"
    "#define stage_alpha2_bias       stage_alpha0_bias\n"
    "#define stage_alpha2_scale      stage_alpha0_scale\n"
    "#define stage_alpha2_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind2_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage3_tex_map_order\tstage0_tex_map_order\n"
    "#define stage3_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage3_ras_order\t\tstage0_ras_order\n"
    "#define stage3_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage3_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color3_a          stage_color0_a\n"
    "#define stage_color3_b          stage_color0_b\n"
    "#define stage_color3_c          stage_color0_c\n"
    "#define stage_color3_d          stage_color0_d\n"
    "#define stage_color3_konst\t\tstage_color0_konst\n"
    "#define stage_color3_op         stage_color0_op\n"
    "#define stage_color3_bias       stage_color0_bias\n"
    "#define stage_color3_scale      stage_color0_scale\n"
    "#define stage_color3_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha3_a          stage_alpha0_a\n"
    "#define stage_alpha3_b          stage_alpha0_b\n"
    "#define stage_alpha3_c          stage_alpha0_c\n"
    "#define stage_alpha3_d          stage_alpha0_d\n"
    "#define stage_alpha3_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha3_op         stage_alpha0_op\n"
    "#define stage_alpha3_bias       stage_alpha0_bias\n"
    "#define stage_alpha3_scale      stage_alpha0_scale\n"
    "#define stage_alpha3_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind3_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage4_tex_map_order\tstage0_tex_map_order\n"
    "#define stage4_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage4_ras_order\t\tstage0_ras_order\n"
    "#define stage4_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage4_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color4_a          stage_color0_a\n"
    "#define stage_color4_b          stage_color0_b\n"
    "#define stage_color4_c          stage_color0_c\n"
    "#define stage_color4_d          stage_color0_d\n"
    "#define stage_color4_konst\t\tstage_color0_konst\n"
    "#define stage_color4_op         stage_color0_op\n"
    "#define stage_color4_bias       stage_color0_bias\n"
    "#define stage_color4_scale      stage_color0_scale\n"
    "#define stage_color4_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha4_a          stage_alpha0_a\n"
    "#define stage_alpha4_b          stage_alpha0_b\n"
    "#define stage_alpha4_c          stage_alpha0_c\n"
    "#define stage_alpha4_d          stage_alpha0_d\n"
    "#define stage_alpha4_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha4_op         stage_alpha0_op\n"
    "#define stage_alpha4_bias       stage_alpha0_bias\n"
    "#define stage_alpha4_scale      stage_alpha0_scale\n"
    "#define stage_alpha4_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind4_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage5_tex_map_order\tstage0_tex_map_order\n"
    "#define stage5_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage5_ras_order\t\tstage0_ras_order\n"
    "#define stage5_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage5_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color5_a          stage_color0_a\n"
    "#define stage_color5_b          stage_color0_b\n"
    "#define stage_color5_c          stage_color0_c\n"
    "#define stage_color5_d          stage_color0_d\n"
    "#define stage_color5_konst\t\tstage_color0_konst\n"
    "#define stage_color5_op         stage_color0_op\n"
    "#define stage_color5_bias       stage_color0_bias\n"
    "#define stage_color5_scale      stage_color0_scale\n"
    "#define stage_color5_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha5_a          stage_alpha0_a\n"
    "#define stage_alpha5_b          stage_alpha0_b\n"
    "#define stage_alpha5_c          stage_alpha0_c\n"
    "#define stage_alpha5_d          stage_alpha0_d\n"
    "#define stage_alpha5_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha5_op         stage_alpha0_op\n"
    "#define stage_alpha5_bias       stage_alpha0_bias\n"
    "#define stage_alpha5_scale      stage_alpha0_scale\n"
    "#define stage_alpha5_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind5_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage6_tex_map_order\tstage0_tex_map_order\n"
    "#define stage6_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage6_ras_order\t\tstage0_ras_order\n"
    "#define stage6_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage6_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color6_a          stage_color0_a\n"
    "#define stage_color6_b          stage_color0_b\n"
    "#define stage_color6_c          stage_color0_c\n"
    "#define stage_color6_d          stage_color0_d\n"
    "#define stage_color6_konst\t\tstage_color0_konst\n"
    "#define stage_color6_op         stage_color0_op\n"
    "#define stage_color6_bias       stage_color0_bias\n"
    "#define stage_color6_scale      stage_color0_scale\n"
    "#define stage_color6_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha6_a          stage_alpha0_a\n"
    "#define stage_alpha6_b          stage_alpha0_b\n"
    "#define stage_alpha6_c          stage_alpha0_c\n"
    "#define stage_alpha6_d          stage_alpha0_d\n"
    "#define stage_alpha6_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha6_op         stage_alpha0_op\n"
    "#define stage_alpha6_bias       stage_alpha0_bias\n"
    "#define stage_alpha6_scale      stage_alpha0_scale\n"
    "#define stage_alpha6_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind6_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "#define stage7_tex_map_order\tstage0_tex_map_order\n"
    "#define stage7_tex_coord_order\tstage0_tex_coord_order\n"
    "#define stage7_ras_order\t\tstage0_ras_order\n"
    "#define stage7_ras_swap\t\t\tstage0_ras_swap\n"
    "#define stage7_tex_map_swap\t\tstage0_tex_map_swap\n"
    "#define stage_color7_a          stage_color0_a\n"
    "#define stage_color7_b          stage_color0_b\n"
    "#define stage_color7_c          stage_color0_c\n"
    "#define stage_color7_d          stage_color0_d\n"
    "#define stage_color7_konst\t\tstage_color0_konst\n"
    "#define stage_color7_op         stage_color0_op\n"
    "#define stage_color7_bias       stage_color0_bias\n"
    "#define stage_color7_scale      stage_color0_scale\n"
    "#define stage_color7_out_reg    stage_color0_out_reg\n"
    "#define stage_alpha7_a          stage_alpha0_a\n"
    "#define stage_alpha7_b          stage_alpha0_b\n"
    "#define stage_alpha7_c          stage_alpha0_c\n"
    "#define stage_alpha7_d          stage_alpha0_d\n"
    "#define stage_alpha7_konst\t\tstage_alpha0_konst\n"
    "#define stage_alpha7_op         stage_alpha0_op\n"
    "#define stage_alpha7_bias       stage_alpha0_bias\n"
    "#define stage_alpha7_scale      stage_alpha0_scale\n"
    "#define stage_alpha7_out_reg    stage_alpha0_out_reg\n"
    "#define stage_ind7_offset       ind_offset_null\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// マテリアル\n"
    "//------------------------------------------------------------------------------\n"
    "layout(std140) uniform Mat\n"
    "{\n"
    "    vec4        mat_color0;       // @@ id=\"mat_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        mat_color1;       // @@ id=\"mat_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        amb_color0;       // @@ id=\"amb_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        amb_color1;       // @@ id=\"amb_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color0;       // @@ id=\"tev_color0\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color1;       // @@ id=\"tev_color1\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        tev_color2;       // @@ id=\"tev_color2\"    item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst0;           // @@ id=\"konst0\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst1;           // @@ id=\"konst1\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst2;           // @@ id=\"konst2\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4        konst3;           // @@ id=\"konst3\"        item=\"color\"     default=\"1 1 1 1\"\n"
    "    vec4\t\tind_texmtx0[ 2 ]; // @@ id=\"ind_texmtx0\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\tind_texmtx1[ 2 ]; // @@ id=\"ind_texmtx1\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\tind_texmtx2[ 2 ]; // @@ id=\"ind_texmtx2\"   type=\"srt2d\"     default=\"1 1 0 0 0\"\n"
    "    vec4\t\ttexmtx0[ 3 ];     // @@ id=\"texmtx0\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo0\"\n"
    "    vec4\t\ttexmtx1[ 3 ];     // @@ id=\"texmtx1\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo1\"\n"
    "    vec4\t\ttexmtx2[ 3 ];     // @@ id=\"texmtx2\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo2\"\n"
    "    vec4\t\ttexmtx3[ 3 ];     // @@ id=\"texmtx3\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo3\"\n"
    "    vec4\t\ttexmtx4[ 3 ];     // @@ id=\"texmtx4\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo4\"\n"
    "    vec4\t\ttexmtx5[ 3 ];     // @@ id=\"texmtx5\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo5\"\n"
    "    vec4\t\ttexmtx6[ 3 ];     // @@ id=\"texmtx6\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo6\"\n"
    "    vec4\t\ttexmtx7[ 3 ];     // @@ id=\"texmtx7\"       type=\"texsrt_ex\" default=\"0 1 1 0 0 0\" hint=\"albedo7\"\n"
    "};\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// (Custom for Windows port) Alpha test & Item ID\n"
    "//------------------------------------------------------------------------------\n"
    "struct PS_PUSH_DATA\n"
    "{\n"
    "    uint alphaFunc;\n"
    "    float alphaRef;\n"
    "    uint uItemID; int uIsSelected;\n"
    "};\n"
    "\n"
    "uniform PS_PUSH_DATA PS_PUSH;\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// (Custom for Windows port) Fragment Outputs\n"
    "//------------------------------------------------------------------------------\n"
    "layout (location = 0) out vec4 FragData_0;\n"
    "layout (location = 1) out vec4 FragData_1;\n"
    "layout (location = 2) out uint ItemID;\n"
    "\n"
    "//------------------------------------------------------------------------------\n"
    "// テクスチャ\n"
    "//------------------------------------------------------------------------------\n"
    "uniform sampler2D tex_map0; // @@ id=\"_a0\" hint=\"albedo0\"\n"
    "uniform sampler2D tex_map1; // @@ id=\"_a1\" hint=\"albedo1\"\n"
    "uniform sampler2D tex_map2; // @@ id=\"_a2\" hint=\"albedo2\"\n"
    "uniform sampler2D tex_map3; // @@ id=\"_a3\" hint=\"albedo3\"\n"
    "uniform sampler2D tex_map4; // @@ id=\"_a4\" hint=\"albedo4\"\n"
    "uniform sampler2D tex_map5; // @@ id=\"_a5\" hint=\"albedo5\"\n"
    "uniform sampler2D tex_map6; // @@ id=\"_a6\" hint=\"albedo6\"\n"
    "uniform sampler2D tex_map7; // @@ id=\"_a7\" hint=\"albedo7\"\n"
    "\n"
    "in      vec2   tex_coord0;\n"
    "in      vec2   tex_coord1;\n"
    "in      vec2   tex_coord2;\n"
    "in      vec2   tex_coord3;\n"
    "in      vec2   tex_coord4;\n"
    "in      vec2   tex_coord5;\n"
    "in      vec2   tex_coord6;\n"
    "in      vec2   tex_coord7;\n"
    "in      vec4   color0a0;\n"
    "in      vec4   color1a1;\n"
    "in      vec4   fog_color;\n"
    "// red-pro2\r\n"
    "in      vec3   normal;\n"
    "\n"
    "#define one  const_one\n"
    "#define zero const_zero\n"
    "#define half const_half\n"
    "\n"
    "const float divide_2  = 0.5;\n"
    "const float scale_1   = 1.0;\n"
    "const float scale_2   = 2.0;\n"
    "const float scale_4   = 4.0;\n"
    "const float op_add    = 1.0;\n"
    "const float op_sub    = -1.0;\n"
    "\n"
    "// for swizzle accsess\n"
    "const vec4 const_zero = vec4( 0.0 );\n"
    "const vec4 const_half = vec4( 0.5 );\n"
    "const vec4 const_one  = vec4( 1.0 );\n"
    "const vec4 sub_half   = vec4( -0.5 );\n"
    "const vec4 add_half   = vec4( 0.5 );\n"
    "const vec4 konst_8_8  = konst_color8( 8.0 );\n"
    "const vec4 konst_7_8  = konst_color8( 7.0 );\n"
    "const vec4 konst_6_8  = konst_color8( 6.0 );\n"
    "const vec4 konst_5_8  = konst_color8( 5.0 );\n"
    "const vec4 konst_4_8  = konst_color8( 4.0 );\n"
    "const vec4 konst_3_8  = konst_color8( 3.0 );\n"
    "const vec4 konst_2_8  = konst_color8( 2.0 );\n"
    "const vec4 konst_1_8  = konst_color8( 1.0 );\n"
    "const vec4 color_null = const_one;\n"
    "\n"
    "void main( void )\n"
    "{\n"
    "#if ( tev_stage_num < 0 || TEV_STAGE_MAX < tev_stage_num )\n"
    "#   error\n"
    "#endif\n"
    "\n"
    "#if ( ind_stage_num < 0 || IND_STAGE_MAX < ind_stage_num )\n"
    "#   error\n"
    "#endif\n"
    "\n"
    "    vec2 ind_offset0     = vec2( 0.0 );\n"
    "    vec2 ind_offset1     = vec2( 0.0 );\n"
    "    vec2 ind_offset2     = vec2( 0.0 );\n"
    "    vec2 ind_offset3     = vec2( 0.0 );\n"
    "    vec2 ind_offset_null = vec2( 0.0 );\n"
    "\n"
    "    // indirect\n"
    "#if ( 0 < ind_stage_num )\n"
    "    calc_ind_stage( 0 );\n"
    "#endif\n"
    "\n"
    "#if ( 1 < ind_stage_num )\n"
    "    calc_ind_stage( 1 );\n"
    "#endif\n"
    "\n"
    "#if ( 2 < ind_stage_num )\n"
    "    calc_ind_stage( 2 );\n"
    "#endif\n"
    "\n"
    "#if ( 3 < ind_stage_num )\n"
    "    calc_ind_stage( 3 );\n"
    "#endif\n"
    "\n"
    "    // tev stage\n"
    "    vec4 reg0 = tev_color0;\n"
    "    vec4 reg1 = tev_color1;\n"
    "    vec4 reg2 = tev_color2;\n"
    "    vec4 prev = one;\n"
    "\n"
    "#if ( 0 < tev_stage_num )\n"
    "    calc_tev_stage( 0 );\n"
    "#endif\n"
    "\n"
    "#if ( 1 < tev_stage_num )\n"
    "    calc_tev_stage( 1 );\n"
    "#endif\n"
    "\n"
    "#if ( 2 < tev_stage_num )\n"
    "    calc_tev_stage( 2 );\n"
    "#endif\n"
    "\n"
    "#if ( 3 < tev_stage_num )\n"
    "    calc_tev_stage( 3 );\n"
    "#endif\n"
    "\n"
    "#if ( 4 < tev_stage_num )\n"
    "    calc_tev_stage( 4 );\n"
    "#endif\n"
    "\n"
    "#if ( 5 < tev_stage_num )\n"
    "    calc_tev_stage( 5 );\n"
    "#endif\n"
    "\n"
    "#if ( 6 < tev_stage_num )\n"
    "    calc_tev_stage( 6 );\n"
    "#endif\n"
    "\n"
    "#if ( 7 < tev_stage_num )\n"
    "    calc_tev_stage( 7 );\n"
    "#endif\n"
    "\n"
    "    switch (PS_PUSH.alphaFunc & 255u)\n"
    "    {\n"
    "        case 0u:\n"
    "        {\n"
    "            discard;\n"
    "        }\n"
    "        case 1u:\n"
    "        {\n"
    "            if (!(prev.a < PS_PUSH.alphaRef))\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 2u:\n"
    "        {\n"
    "            if (abs(prev.a - PS_PUSH.alphaRef) > 9.9999997473787516355514526367188e-05)\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 3u:\n"
    "        {\n"
    "            if (!(prev.a <= PS_PUSH.alphaRef))\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 4u:\n"
    "        {\n"
    "            if (!(prev.a > PS_PUSH.alphaRef))\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 5u:\n"
    "        {\n"
    "            if (abs(prev.a - PS_PUSH.alphaRef) <= 9.9999997473787516355514526367188e-05)\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "        case 6u:\n"
    "        {\n"
    "            if (!(prev.a >= PS_PUSH.alphaRef))\n"
    "            {\n"
    "                discard;\n"
    "            }\n"
    "            break;\n"
    "        }\n"
    "    }\n"
    "    \n"
    "    vec4 FragColor = vec4(mix(prev.rgb, fog_color.rgb, fog_color.a), prev.a);\n"
    "    \n"
    "    if (PS_PUSH.uIsSelected != 0)\n"
    "        FragData_0 = vec4(FragColor.rgb * 0.5f + vec3(1.0f, 0.25f, 0.25f) * 0.5f, 1.0f);\n"
    "    else\n"
    "        FragData_0 = FragColor;\n"
    "    \n"
    "    ItemID         = PS_PUSH.uItemID;\n"
    "    \n"
    "    FragData_1.rgb = normalize( normal ) * 0.5 + 0.5;\r\n"
    "    FragData_1.a   = 1.0;   \n"
    "}\n"
    "\n"
    "\n"
    "\x00"
#endif // RIO_IS_WIN
};

}
